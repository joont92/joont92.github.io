<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[3장 스프링 웹 기술과 스프링 MVC]]></title>
      <url>/3%EC%9E%A5-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81-MVC/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Chris Hemsworth loves internet Thor Puns(4주)]]></title>
      <url>/english/Chris-Hemsworth-loves-internet-Thor-Puns(4%EC%A3%BC)/</url>
      <content type="html"><![CDATA[<h3 id="본문"><a href="#본문" class="headerlink" title="본문"></a>본문</h3><blockquote>
<p><strong>Conan</strong> :<br>There must be people that come up to you with Thor jokes, all the times.<br>Just because you’re so, you’re Thor.  </p>
<p><strong>Chris</strong> :<br>You get the same joke, pretty much.<br>In fact, the single same joke that I’ve had for three years now.<br>It is not very funny. But I can tell it to you if you want.  </p>
<p><strong>Conan</strong> :<br>You’re in the right show. trust me.  </p>
<p><strong>Chris</strong> :<br>So, basically Thor meets this young maiden.<br>And they sleep with one another, and have a wonderful night.<br>And the next morning Thor says,<br>“Fair maiden, I must confess and tell you who I am. I’m Thor.”<br>And she said,<br>“You’re Thor? I can hardly walk.”<br>…<br>Very generous audience.  </p>
<p><strong>Conan</strong> :<br>Nice! That timinig on that was perfect!  </p>
<p><strong>Chris</strong> :<br>About 60 seconds off there.  </p>
<p><strong>Conan</strong> :<br>I like long pause.<br>So, how many time have you heard that joke?<br>People have said that to you.  </p>
<p><strong>Chris</strong> :<br>I reckon about 300 times. I swear to God.  </p>
<p><strong>Conan</strong> :<br>I gotta use that one. That’s good.<br>…<br>You know, so much the fans,<br>I mean, the reaction of the people here when you came out,<br>and the fans are so devoted to you and to the films,<br>the fan arts, it’s so incredible and very silly.  </p>
<p><strong>Chris</strong> :<br>It is, yeah.  </p>
<p><strong>Conan</strong> :<br>I was looking it at online.  </p>
<p><strong>Chris</strong> :<br>It’s same thing.<br>There’s been many crazy fan arts reproductions of certain things involved with the Thor…  </p>
<p><strong>Conan</strong> :<br>I think we have some. There’s Thoreal.<br>That’s a really good one.  </p>
<p><strong>Chris</strong> :<br>That’s my hair commercial.  </p>
<p><strong>Conan</strong> :<br>You shoud try and get that ad. There’s Thor De France.<br>Very nice.<br>And There’s Pathor. Very nice.<br>…<br>That’s my favorite so far.  </p>
<p><strong>Chris</strong> :<br>That one was actually me. That was me.  </p>
<p><strong>Conan</strong> :<br>You will get hair ad.<br>I’m sure they are coming to you and asking.<br>Have you ever seen.. because Holloween, a couple days ago.<br>Have you ever run into an adult of kid dressed as Thor and had to deal with them?  </p>
<p><strong>Chris</strong> :<br>Yeah, a lot of Comi Con conventions and things. you see it.<br>But I was at the airport, few weeks ago.<br>This little kids was runing aroung in the full Thor outfit.<br>He has the hammer, and he’s smashing things.<br>His mother was there.<br>And she came up to me and grabs her son,<br>“Look, look, It’s Thor. Thor.”<br>And he looks up and he goes,<br>“No, it’s not.”<br>Take off the airport.<br>I thing with costume and hair..  </p>
<p><strong>Conan</strong> :<br>Yeah, and then he hit you in the knee, at least.  </p>
</blockquote>
<h3 id="어휘"><a href="#어휘" class="headerlink" title="어휘"></a>어휘</h3><ol>
<li>take off : 이륙하다</li>
<li>fair : 어여쁜</li>
<li>maiden : 처녀, 아가씨</li>
<li>basically : 근본적으로, 기본적으로</li>
<li>certain : 확실한</li>
<li>come out : 나오다</li>
<li>commercial : 광고</li>
<li>confess : 고백하다(죄,잘못,수치스러운것,당황스러운것을)</li>
<li>deal with : ~를 다루다, ~를 대하다</li>
<li>devoted : 헌신적인</li>
<li>dress as : ~의 복장을 하다</li>
<li>generous : 관대한</li>
<li>hardly : 거의 ~할 수가 없다</li>
<li>involved with : ~와 연관된</li>
<li>look up : 올려다보다</li>
<li>one another : 서로</li>
<li>outfit : 옷(복장), 장비</li>
<li>reckon : ~이라고 생각하다</li>
<li>reproduction : 복제</li>
<li>run into : 우연히 만나다</li>
<li>silly : 어리석은, 우스꽝스러운</li>
</ol>
<h3 id="답답노트"><a href="#답답노트" class="headerlink" title="답답노트"></a>답답노트</h3><ul>
<li>외장하드<blockquote>
<p>external hard disk</p>
</blockquote>
</li>
<li>턱걸이<blockquote>
<p>chin-up</p>
</blockquote>
</li>
<li>이직하다<blockquote>
<p>change jobs</p>
</blockquote>
</li>
<li>꺾다(손가락, 발가락 등을)<blockquote>
<p>twist</p>
</blockquote>
</li>
<li>적금<blockquote>
<p>installment saving</p>
</blockquote>
</li>
<li>귀한<blockquote>
<p>precious (valuable은 값이 많이 나가서 소중할 때를 의미)</p>
</blockquote>
</li>
<li>기준점<blockquote>
<p>standard point</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> english </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Amanda Seyfried was hot for NSYNC's JC(3주)]]></title>
      <url>/english/Amanda-Seyfried-was-hot-for-NSYNC-s-JC(3%EC%A3%BC)/</url>
      <content type="html"><![CDATA[<h3 id="본문"><a href="#본문" class="headerlink" title="본문"></a>본문</h3><blockquote>
<p><strong>Conan</strong> :<br>You have worked in two films, is that right, with Justin Timberlake?  </p>
<p><strong>Amanda</strong> :<br>Oh, two films with Justin, Yeah.  </p>
<p><strong>Conan</strong> :<br>Yeah, Oh, you call him Justin. I call him JT.  </p>
<p><strong>Amanda</strong> :<br>OK, well….  </p>
<p><strong>Conan</strong> :<br>I call him Juh.  </p>
<p><strong>Amanda</strong> :<br>I don’t even call him anything. because that’s how close we are.  </p>
<p><strong>Conan</strong> :<br>You don’t say anything. But he know you’re talking about him.  </p>
<p><strong>Amanda</strong> :<br>It’s like a nod.  </p>
<p><strong>Conan</strong> :<br>OK. Were you.. obviously, you are in that age range. Were you a big NSYNC fan?  </p>
<p><strong>Amanda</strong> :<br>Yeah, I was. Who wasn’t? Come on.<br>But I had to pretend I wasn’t, thought.<br>I mean, I hope he is not watching this.<br>Don’t tell anybody. Don’t tell him.<br>Yeah, I was obsessed with NSYNC.<br>Are you kidding me? Look at me. I’m 26. I was perfect age.<br>But he wasn’t my favorite.<br>I didn’t even find him attractive, in fact.  </p>
<p><strong>Conan</strong> :<br>Who was your favorite of those guys?<br>Let’s see.. There’s a Chic, there’s a Ned…  </p>
<p><strong>Amanda</strong> :<br>You must be talking about some other boy bands.  </p>
<p><strong>Conan</strong> :<br>I don’t know. What are their names?  </p>
<p><strong>Amanda</strong> :<br>They had a lot of names. I liked JC.<br>Don’t know where he is.  </p>
<p><strong>Conan</strong> :<br>We’ve got some JC people here.  </p>
<p><strong>Amanda</strong> :<br>Where is JC.. I can’t even say his last name.  </p>
<p><strong>Conan</strong> :<br>He’s not here.  </p>
<p><strong>Amanda</strong> :<br>No, I mean, I haven’t seen the guys for in years.  </p>
<p><strong>Conan</strong> :<br>You used to see him around?<br>He’d just be hanging around?  </p>
<p><strong>Amanda</strong> :<br>When I came to hollywood, you’d better believe I saw him around.  </p>
<p><strong>Conan</strong> :<br>That sounds kind of threatening, actually.  </p>
<p><strong>Andy</strong> :<br>It sounds like someone who has got a restraining order.  </p>
<p><strong>Amanda</strong> :<br>Oh my God.  </p>
<p><strong>Conan</strong> :<br>JC won’t let you come near him.  </p>
<p><strong>Amanda</strong> :<br>I wish that were my problem.  </p>
</blockquote>
<h3 id="어휘"><a href="#어휘" class="headerlink" title="어휘"></a>어휘</h3><ol>
<li>attractive : 매력적인, 멋진  </li>
<li>be obsessed with : ~에 사로잡혀 있는  </li>
<li>hang around : 어울리다, 서성거리다</li>
<li>in fact : 사실은</li>
<li>in years : 몇 년 동안이나</li>
<li>kind of : 약간, 어느 정도</li>
<li>nod : 끄덕이다</li>
<li>obviously : 분명하게, 명백하게</li>
<li>pretend : ~인 척하다</li>
<li>threatening : 협박</li>
</ol>
]]></content>
      
        <categories>
            
            <category> english </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[DispatcherServlet 동작방식]]></title>
      <url>/DispatcherServlet-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql data sample]]></title>
      <url>/db/mysql-data-sample/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/datacharmer/test_db" target="_blank" rel="external">https://github.com/datacharmer/test_db</a>  </p>
<p><code>mysql &lt; employees.sql</code><br>이거 외엔 딱히 할 필요 없어보이긴 함</p>
<p><img src="https://user-images.githubusercontent.com/18513953/33320411-7fb7b6ce-d485-11e7-858b-420c8d45b795.png" alt="image"></p>
<p>무슨 의도로 이렇게 설계했는지 아직까진 모르겠으나…. 내 입장에선 매우 불편함<br>FROM_DATE, TO_DATE는 뭐에 쓰라는거지..<br>기본 ORACLE EMPLOYEE DB나 있었으면</p>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Psy&Snoop on working together(2주)]]></title>
      <url>/english/Psy-Snoop-on-working-together(2%EC%A3%BC)/</url>
      <content type="html"><![CDATA[<h3 id="본문"><a href="#본문" class="headerlink" title="본문"></a>본문</h3><blockquote>
<p><strong>Jimmy</strong> :<br>How did this unbelivable paring come to be?<br>How did you two get together?  </p>
<p><strong>Psy</strong> :<br>I called him, and I said “Can you feature on my song?”<br>and he said “What is the title of the song?”<br>and I said “Hangover”<br>he said, “Oh, I’m doing it”  </p>
<p><strong>Jimmy</strong> :<br>Snoop gives a lot of thought to thease things.<br>He takes it under careful consideration.  </p>
<p><strong>Psy</strong> :<br>We’d never met before, after song’s done.<br>I was in Asia, he was in here.<br>He was doing his part in LA, I did my part in Korea.<br>We were on the phone, and we did it by internet.  </p>
<p><strong>Jimmy</strong> :<br>Unbelivable, you’d not met until you shoot the music video?  </p>
<p><strong>Psy</strong> :<br>Not really.  </p>
<p><strong>Jimmy</strong> :<br>Wow, and even the Snoop doesn’t remember meeting you.<br>…<br>You went over to South Korea to shot the video.<br>Was that a fun experience for you guys?  </p>
<p><strong>Snoop</strong> :<br>For me, It was awesome.<br>Because I’ve always wanted to be in an matial arts movie,<br>and I felt like I was in Kingdom of it all.<br>The stuff that he had us doing, the thing that was going aroung us,<br>it felt like I was in action movie, I felt like I was a Karate star.  </p>
<p><strong>Jimmy</strong> :<br>How long were you over there in South Korea?  </p>
<p><strong>Psy</strong> :<br>I gotta say this, because I really felt sorry about him.<br>We were spending only 18 hours shooting the video.  </p>
<p><strong>Snoop</strong> :<br>18 hours straight. This man doesn’t take a break.  </p>
<p><strong>Psy</strong> :<br>We all know he is really diligent, right?<br>Every time he wanted to take a rest, but we didn’t have time.  </p>
<p><strong>Snoop</strong> :<br>Not a rest, but a break.  </p>
<p><strong>Jimmy</strong> :<br>Yeah, right.  </p>
</blockquote>
<h3 id="어휘"><a href="#어휘" class="headerlink" title="어휘"></a>어휘</h3><ul>
<li>awesome : 굉장하다</li>
<li>be on the phone : 통화 중이다</li>
<li>careful consideration : 심사숙고</li>
<li>feel like : ~한 느낌이다</li>
<li>give a lot of thought : ~에 대해 많은 생각을 하다</li>
<li>hangover : 숙취</li>
<li>pairing : 한 쌍</li>
</ul>
<h3 id="답답노트"><a href="#답답노트" class="headerlink" title="답답노트"></a>답답노트</h3><ul>
<li>정신 사납다<blockquote>
<p>It’s so distracting.</p>
</blockquote>
</li>
<li>자율(유연)근무제<blockquote>
<p>Flexible working</p>
</blockquote>
</li>
<li>도박<blockquote>
<p>gambling</p>
</blockquote>
</li>
<li>퇴직자<blockquote>
<p>retiree</p>
</blockquote>
</li>
<li>스키장<blockquote>
<p>ski resort</p>
</blockquote>
</li>
<li>난감하다, 황당하다<blockquote>
<p>It’s so embarrassing</p>
</blockquote>
</li>
<li>사납다<blockquote>
<p>violent</p>
</blockquote>
</li>
<li>재능<blockquote>
<p>talent</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> english </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[쿼리작성 및 최적화]]></title>
      <url>/db/%EC%BF%BC%EB%A6%AC%EC%9E%91%EC%84%B1-%EB%B0%8F-%EC%B5%9C%EC%A0%81%ED%99%94/</url>
      <content type="html"><![CDATA[<h3 id="시스템-설정"><a href="#시스템-설정" class="headerlink" title="시스템 설정"></a>시스템 설정</h3><h4 id="SQL-모드"><a href="#SQL-모드" class="headerlink" title="SQL 모드"></a>SQL 모드</h4><p>MySql 서버에는 sql_mode 라는 시스템 설정이 있다.<br>이 설정을 통해 SQL의 작성, 결과 등에 영향을 주게 된다.<br>ANSI, STRICT_TRANS_TABLES, TRANDITIONAL, ONLY_FULL_GROUP_BY 등등..<br><code>my.cnf</code> 파일에<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql_mode=STRICT_TRANS_TABLES,ANSI</div></pre></td></tr></table></figure></p>
<p>의 형태로 작성해주면 된다. ,로 구분하여 여러개 지정할 수 있다.  </p>
<h4 id="영문-대소문자"><a href="#영문-대소문자" class="headerlink" title="영문 대소문자"></a>영문 대소문자</h4><p>MySql은 설치된 운영체제에 따라 테이블의 대소문자를 구분한다.ex) 윈도우 : 구분X, 리눅스 : 구분O<br>DB나 테이블이 디스크의 디렉터리나 파일로 매핑되기 때문이다.<br>가능하면 대문자만 또는 소문자만으로 통일하는 것이 좋다.  </p>
<h4 id="예약어"><a href="#예약어" class="headerlink" title="예약어"></a>예약어</h4><p>일반적으로 테이블이나 컬럼 생성 시 예약어를 이름으로 사용하면 에러가 발생한다.<br>그러나 역따옴표(`)나 쌍따옴표(\”)로 감싸면 이를 피할 수 있다.<br>예를 들면 테이블 생성 시 역따옴표(`)로 둘러싸면 에러를 발생시키지 않는다.<br>하지만 역따옴표로 둘러싸서 생성하는 것을 권장하지는 않는다.  </p>
<hr>
<h3 id="메뉴얼-읽는-법"><a href="#메뉴얼-읽는-법" class="headerlink" title="메뉴얼 읽는 법"></a>메뉴얼 읽는 법</h3><p><img src="https://user-images.githubusercontent.com/18513953/33943893-c5f3443a-e05d-11e7-8ebd-fbff301bbf42.png" alt="image">   </p>
<blockquote>
<ul>
<li>대문자는 키워드를 의미한다.  </li>
<li>이텔릭체는 사용자가 작성하는 이름 또는 표현식을 의미한다.  </li>
<li>대괄호([])는 선택사항임을 의미한다.  </li>
<li>파이프(|)는 연결된 것 중 단 하나만 선택할 수 있음을 의미한다.</li>
<li>중괄호({})는 괄호 내 선택사항 중 반드시 하나를 선택해야 함을 의미한다.</li>
<li>…는 앞에 명시된 키워드나 표현이 반복될 수 있음을 의미한다.</li>
</ul>
</blockquote>
<hr>
<h3 id="MySQL-연산자-내장함수"><a href="#MySQL-연산자-내장함수" class="headerlink" title="MySQL 연산자, 내장함수"></a>MySQL 연산자, 내장함수</h3><h4 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h4><h5 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h5><p>항상 홑따옴표(\’)를 사용해서 표시한다.<br>홑따옴표 자체를 사용하고 싶을 때는 홑따옴표를 두번 연속 입력하면 된다.<br>쌍따옴표와 홑따옴표의 조합으로 위의 행위를 할 수 있지만 MySql만 지원되는 방식이다.</p>
<h5 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h5><p>다른 시스템들과 동일하게 \’나 \” 없이 숫자 값을 입력하면 된다.  </p>
<blockquote>
<p><strong>※ 자동 형 변환</strong><br>MySql에서는 문자와 숫자를 비교할 때 자동으로 숫자값으로 형 변환해준다. (숫자 &gt; 문자)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WHERE number_col = &apos;10001&apos;;</div></pre></td></tr></table></figure></p>
<p>와 같은 경우는 문제가 되지 않지만,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WHERE string_col = 10001;</div></pre></td></tr></table></figure></p>
<p>의 경우에는 문제가 발생할 수 있다.<br>위와 같은 경우 오른쪽 숫자가 우선순위가 더 높으므로<br>왼쪽의 string_col이 숫자로 형 변환하는 상황이 발생하는데,<br>이로 인해 string_col은 인덱스를 사용하지 못하고,<br>만약 문자값이 포함된 데이터가 있다면 SQL 실행 오류로도 이어진다.</p>
</blockquote>
<h5 id="날짜"><a href="#날짜" class="headerlink" title="날짜"></a>날짜</h5><p>MySql에서 정해진 형태의 포멧으로 날짜를 입력하면(문자열로),<br>MySQL에서 자동으로 DATE나 DATETIME으로 변환하여 준다.<br>위의 숫자 리터럴과 동일하다. (날짜 &gt; 문자)</p>
<h5 id="불리언"><a href="#불리언" class="headerlink" title="불리언"></a>불리언</h5><p>BOOLEAN이란 타입이 있긴 하나 실상 TINYINT에 대한 동의어일 뿐이다.<br>(테이블 컬럼 타입을 BOOLEAN으로 생성한 뒤 확인해보면 TINYINT 이다.)<br>BOOLEAN의 TRUE는 1을 의미하고, FALSE는 0을 의미한다.<br>0과 1만을 사용한다는 점을 주의해야 한다!!  </p>
<h4 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h4><h5 id="동등-비교"><a href="#동등-비교" class="headerlink" title="동등 비교"></a>동등 비교</h5><p>=, &lt;=&gt;<br>기본적으로 NULL과의 연산은 결과값이 모두 NULL이다.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span>=<span class="number">1</span> <span class="keyword">FROM</span> DUAL;</div></pre></td></tr></table></figure></p>
<p>> NULL  </p>
<p>그래서 NULL의 경우 IS NULL등의 연산자로 비교해야 하는데, &lt;=&gt; 의 경우에는 NULL 또한 하나의 값으로 인식하여 계산한다.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span>&lt;=&gt;<span class="literal">NULL</span> <span class="keyword">FROM</span> DUAL;</div></pre></td></tr></table></figure></p>
<p>> 1</p>
<h5 id="부정-비교"><a href="#부정-비교" class="headerlink" title="부정 비교"></a>부정 비교</h5><p>&lt;&gt;, !=<br>둘중 어느것을 사용하든 상관없지만 통일하는 것이 좋다.  </p>
<h5 id="NOT-연산자"><a href="#NOT-연산자" class="headerlink" title="NOT 연산자"></a>NOT 연산자</h5><p>결과를 반대로 만든다. 부정의 결과를 정확히 예측할 수 없는 경우 사용하지 말자.<br>ex) !’test’    </p>
<h5 id="AND-OR-연산자"><a href="#AND-OR-연산자" class="headerlink" title="AND, OR 연산자"></a>AND, OR 연산자</h5><p>&amp;&amp;, ||로 대체할 수 있으나 혼란을 야기하니 사용하지 말자.  </p>
<h5 id="나누기-나머지-연산자"><a href="#나누기-나머지-연산자" class="headerlink" title="나누기, 나머지 연산자"></a>나누기, 나머지 연산자</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="number">29</span>/<span class="number">9</span> <span class="keyword">FROM</span> DUAL;</div><div class="line"><span class="comment">-- 3.222.. // 몫 + 나머지</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">29</span> <span class="keyword">DIV</span> <span class="number">9</span> <span class="keyword">FROM</span> DUAL;</div><div class="line"><span class="comment">-- 3 // 몫</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">29</span> <span class="keyword">MOD</span> <span class="number">9</span> <span class="keyword">FROM</span> DUAL;</div><div class="line"><span class="comment">-- 2 // 나머지</span></div></pre></td></tr></table></figure>
<h5 id="LIKE-연산자"><a href="#LIKE-연산자" class="headerlink" title="LIKE 연산자"></a>LIKE 연산자</h5><p>상수 문자열이 있는지 없는지 정도만을 판단한다.<br>와일드 카드는 딱 2개만 사용가능하다.  </p>
<blockquote>
<p><strong>%</strong> : 0개 또는 1개 이상 일치<br><strong>_</strong> : 정확히 1개 일치</p>
</blockquote>
<p>와일드카드 문자가 검색어의 뒤쪽에 있다면 인덱스 레인지 스캔을 사용할 수 있다!<br>와일드카드가 앞쪽에 올 경우 인덱스 풀 스캔 또는 테이블 풀 스캔을 하게 된다.  </p>
<p>와일드카드 문자를 검색에 사용하고 싶을 경우 ESCAPE 구문을 사용한다.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">'a%'</span> <span class="keyword">LIKE</span> <span class="string">'a/%'</span> ESCAPE <span class="string">'/'</span> <span class="keyword">FROM</span> DUAL;</div></pre></td></tr></table></figure></p>
<h5 id="BETWEEN-연산자"><a href="#BETWEEN-연산자" class="headerlink" title="BETWEEN 연산자"></a>BETWEEN 연산자</h5><p>=&lt; 연산자와 =&gt; 연산자를 합친 기능을 수행한다.<br>BETWEEN을 위의 연산자로 풀어도 성능상 차이가 없으니 크게 고려하지 않아도 된다.  </p>
<h5 id="IN-연산자"><a href="#IN-연산자" class="headerlink" title="IN 연산자"></a>IN 연산자</h5><p><strong>동등비교를 여러번</strong> 하는 연산자이다. 즉 일반적으로 빠르게 처리된다.<br>연산자의 입력이 상수가 아니라 서브쿼리일 경우 상당히 느려질 수 있으니 주의해야 한다.<br>NOT IN의 경우 부정형 비교여서 인덱스 풀 스캔을 사용한다.  </p>
<blockquote>
<p><strong>※ BETWEEN 연산자와 IN 연산자 차이점</strong><br>BETWEEN의 경우 범위만큼 인덱스를 다 읽어야 하는 반면,<br>IN의 경우 위에서 언급했듯이 동등 연산자를 여러번 수행하는 것과 같다.<br>실행계획을 비교해보면 인덱스를 타고 있지만 rows에서 차이가 나는것을 확인할 수 있다.  </p>
</blockquote>
<h4 id="내장함수"><a href="#내장함수" class="headerlink" title="내장함수"></a>내장함수</h4><h5 id="NULL-값-비교"><a href="#NULL-값-비교" class="headerlink" title="NULL 값 비교"></a>NULL 값 비교</h5><ul>
<li><strong>IFNULL</strong> : 값이 NULL인지 비교하고 NULL이면 다른 값으로 대체한다.<br>첫번째 인자는 NULL인지 비교할 값, 두번째 인자는 NULL일시 대체값이다.<br>첫번째 인자가 NULL이 아닐경우 그대로 출력된다.  </li>
<li><strong>ISNULL</strong> : 값이 NULL인지 아닌지 비교. NULL일 경우 TRUE(1), 아닐경우 FALSE(0)</li>
</ul>
<h5 id="현재-시각-조회"><a href="#현재-시각-조회" class="headerlink" title="현재 시각 조회"></a>현재 시각 조회</h5><ul>
<li><strong>NOW</strong> : 시간 조회. 하나의 SQL내면 모두 같은 값을 가진다.</li>
<li><strong>SYSDATE</strong> : 시간 조회. 하나의 SQL내에서도 호출 시점에 따라 결과값이 달라진다.<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>(), <span class="keyword">SLEEP</span>(<span class="number">1</span>), <span class="keyword">NOW</span>() <span class="keyword">FROM</span> DUAL;</div><div class="line"><span class="comment">-- '2017-12-19 22:39:52' | '0' | '2017-12-19 22:39:52'</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>(), <span class="keyword">SLEEP</span>(<span class="number">1</span>), <span class="keyword">SYSDATE</span>() <span class="keyword">FROM</span> DUAL;</div><div class="line"><span class="comment">-- '2017-12-19 22:40:27' | '0' | '2017-12-19 22:40:28'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>보다시피 SYSDATE의 경우 SLEEP(1)로 인해 1초가 차이난다.<br>SYSDATE의 경우 호출때마다 다른 값을 반환하므로 상수가 아니다.<br>그래서 인덱스를 효율적으로 사용하지 못한다.<br>이러한 문제점이 있으니 SYSDATE는 가급적 사용하지 않는것이 좋다.<br>CURRENT_TIMESTAMP, CURRNET_DATE, CURRENT_TIME은 NOW와 동일한데다 출력을 다양하게 활용할 수 있으니 이것을 사용해도 좋을 것 같다.  </p>
<h5 id="날짜-lt-gt-문자"><a href="#날짜-lt-gt-문자" class="headerlink" title="날짜 &lt;&gt; 문자"></a>날짜 &lt;&gt; 문자</h5><table>
<thead>
<tr>
<th style="text-align:left">지정 문자</th>
<th style="text-align:left">내용</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td style="text-align:left">4자리 연도</td>
</tr>
<tr>
<td style="text-align:left">%y</td>
<td style="text-align:left">2자리 연도</td>
</tr>
<tr>
<td style="text-align:left">%m</td>
<td style="text-align:left">월</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">일자</td>
</tr>
<tr>
<td style="text-align:left">%H</td>
<td style="text-align:left">24h 시간(00 ~ 23)</td>
</tr>
<tr>
<td style="text-align:left">%h</td>
<td style="text-align:left">12h 시간(01 ~ 12)</td>
</tr>
<tr>
<td style="text-align:left">%i</td>
<td style="text-align:left">분</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">초</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>DATE_FORMAT</strong> : 날짜를 문자열로 변환한다.<br>ex) DATE_FORMAT(NOW(), %Y-%m-%d)<br>> 2017-12-19</li>
<li><strong>STR_TO_DATE</strong> : 문자를 날짜로 변환한다.<br>ex) STR_TO_DATE(‘1992^02^07^’,’%Y^%m^%d’)<br>> 1992-02-07<br>참고로 SQL 표준형태로 입력된 문자열은 STR_TO_DATE를 사용하지 않아도 자동으로 DATETIME으로 변환되어 처리된다.</li>
</ul>
<h5 id="날짜-연산"><a href="#날짜-연산" class="headerlink" title="날짜 연산"></a>날짜 연산</h5><ul>
<li><strong>DATE_ADD</strong> : 첫번째 인자로 날짜, 두번째 인자로 더할 날짜를 주면 된다.<br>두번째 인자는 INTERVAL n {KEYWORD} 의 형태로 줘야 한다.<br>DATE_SUB 함수도 있으나 두번째 인자로 음수값을 줄 수 있기 때문에 DATE_ADD만으로도 충분하다.<br>ex) DATE_ADD(NOW(), INTERVAL 3 DAY)<br>※ KEYWORD : YEAR, MONTH, WEEK, DAY, HOUR …  </li>
</ul>
<h5 id="문자열-처리"><a href="#문자열-처리" class="headerlink" title="문자열 처리"></a>문자열 처리</h5><ul>
<li><strong>LPAD, RPAD</strong> : 좌측 혹은 우측에 특정한 문자를 지정한 바이트 만큼 채우는 함수이다.<br>첫번째 인자로 대상 문자열, 두번째 인자로 채울 바이트(첫번째 문자 포함), 세번째 인자로 채울 문자를 넣는다.  </li>
<li><strong>LTRIM, RTRIM, TRIM</strong> : 연속된 공백문자를 제거하는 함수이다.<br>LTRIM은 왼쪽, RTRIM은 오른쪽, TRIM은 양쪽의 공백을 제거한다.  </li>
</ul>
<h5 id="문자열-결합"><a href="#문자열-결합" class="headerlink" title="문자열 결합"></a>문자열 결합</h5><ul>
<li><strong>CONCAT</strong> : 문자열을 결합해서 하나의 문자열로 합치는 함수로 인자 개수는 제한이 없다.<br>ex) CONCAT(‘My name is ‘, ‘JoonT. ‘, ‘Nice to ‘, ‘meet you.’);<br>> My name is JoonT. Nice to meet you.</li>
</ul>
<h5 id="타입-변환"><a href="#타입-변환" class="headerlink" title="타입 변환"></a>타입 변환</h5><ul>
<li><strong>CAST</strong> : 명시적 형 변환을 하는 함수이다.변환할 값과 변환할 타입을 지정해주면 된다. 둘은 AS 로 연결한다.<br>ex) CASE(‘1234’, AS INTEGER)  </li>
</ul>
<h5 id="IP-주소-변환"><a href="#IP-주소-변환" class="headerlink" title="IP 주소 변환"></a>IP 주소 변환</h5><p>IP주소를 UNSIGNED INTEGER의 형태로 상호변환 가능하다.</p>
<ul>
<li><strong>INET_ATON</strong> : IP 주소 -&gt; UNSIGNED INTEGER</li>
<li><strong>INET_NTOA</strong> : UNSIGNED INTEGER -&gt; IP 주소<br>ex) <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">INET_NTOA</span>(ip_addr) </div><div class="line"><span class="keyword">FROM</span> <span class="keyword">TEST</span> </div><div class="line"><span class="keyword">WHERE</span> ip_addr <span class="keyword">BETWEEN</span> </div><div class="line"><span class="keyword">INET_ATON</span>(<span class="string">'192.168.0.1'</span>) <span class="keyword">AND</span> <span class="keyword">INET_ATON</span>(<span class="string">'192.168.0.100'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>훨씬 효과적으로 저장 및 조회가 가능하다.  </p>
<h4 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--- 한줄 주석(SQL 표준)</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">여러줄 주석(SQL 표준)</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">여러줄</span></div><div class="line"><span class="comment">여러줄</span></div><div class="line"><span class="comment">여러분</span></div><div class="line"><span class="comment">*/</span> </div><div class="line"></div><div class="line"># 한줄주석(비표준)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown]]></title>
      <url>/etc/markdown/</url>
      <content type="html"><![CDATA[<h3 id="문단-쓰기-줄바꿈"><a href="#문단-쓰기-줄바꿈" class="headerlink" title="문단 쓰기, 줄바꿈"></a>문단 쓰기, 줄바꿈</h3><p>기본적으로 마크다운은 엔터 한번은 그냥 무시하고 한 문단으로 간주합니다.<br>띄워쓰기를 표시하려면 2번의 엔터를 쳐야 합니다.<br>그러나 몇몇 마크다운 에디터에서는 ‘엔터 한번’ == ‘개행’을 지원하기도 합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">개행 테스트</div><div class="line">개행!</div><div class="line"></div><div class="line">진짜 개행</div></pre></td></tr></table></figure></p>
<p>개행 테스트<br>개행!</p>
<p>진짜 개행</p>
<h3 id="html-직접-사용-가능"><a href="#html-직접-사용-가능" class="headerlink" title="html 직접 사용 가능"></a>html 직접 사용 가능</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;hr /&gt;</div><div class="line">&lt;span style=&quot;color:red&quot;&gt;**red**&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><hr><br><span style="color:red"><strong>red</strong></span></p>
<h3 id="특수문자-자동-적용됨"><a href="#특수문자-자동-적용됨" class="headerlink" title="특수문자 자동 적용됨"></a>특수문자 자동 적용됨</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt; 태그를 사용하자</div><div class="line">&amp;lt;div&amp;gt; 태그를 사용하자</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><div> 태그를 사용하자<br>&lt;div&gt; 태그를 사용하자</div></p>
<h3 id="제목-6개-크기-까지-지원한다"><a href="#제목-6개-크기-까지-지원한다" class="headerlink" title="제목. 6개 크기 까지 지원한다"></a>제목. 6개 크기 까지 지원한다</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># h1</div><div class="line">## h2</div><div class="line">### h3</div><div class="line">#### h4</div><div class="line">##### h5</div><div class="line">###### h6</div><div class="line">####### h7</div></pre></td></tr></table></figure>
<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><p>####### h7</p>
<h3 id="인용"><a href="#인용" class="headerlink" title="인용"></a>인용</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 인용되는 글</div><div class="line">&gt; 길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게</div><div class="line">&gt;&gt; depth를 늘림</div><div class="line">&gt; 내부에서 **markdown** 사용 가능</div></pre></td></tr></table></figure>
<p>> 출력</p>
<blockquote>
<p>인용되는 글<br>길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게길게</p>
<blockquote>
<p>depth를 늘림, 변경할때는 아래와 같이 빈줄 하나 넣어야 함.</p>
</blockquote>
<p>내부에서 <strong>markdown</strong> 사용 가능</p>
</blockquote>
<h3 id="리스트"><a href="#리스트" class="headerlink" title="리스트"></a>리스트</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">숫자의 경우 자동으로 넘버링 된다.</div><div class="line"></div><div class="line">처음쓰는 리스트의 숫자부터 카운트 된다.</div><div class="line"></div><div class="line">1. 숫자</div><div class="line">2. 숫자</div><div class="line">3. 숫자</div><div class="line"></div><div class="line">순서를 바꿔도 1,2,3 으로 출력된다</div><div class="line"></div><div class="line">1. 숫자</div><div class="line">4. 숫자</div><div class="line">7. 숫자</div><div class="line"></div><div class="line">일반 리스트는 *, +, - 중 아무거나 쓰면 된다.</div><div class="line"></div><div class="line">* 일반 리스트</div><div class="line">- 일반 리스트</div><div class="line">+ 일반 리스트</div><div class="line"></div><div class="line">리스트 안에 두 문단이상 사용할 경우, tab을 사용한다.</div><div class="line"></div><div class="line">계속해서 이어가려면 아래와 왼쪽 탭 정렬선을 맞춰줘야 한다.</div><div class="line"></div><div class="line">- 첫번째 리스트</div><div class="line"></div><div class="line">이어지는 문단1</div><div class="line"></div><div class="line">이어지는 문단2</div><div class="line"></div><div class="line">- 두번째 리스트</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p>숫자의 경우 자동으로 넘버링 된다.</p>
<p>처음쓰는 리스트의 숫자부터 카운트 된다.</p>
<ol>
<li>숫자</li>
<li>숫자</li>
<li>숫자</li>
</ol>
<p>순서를 바꿔도 1,2,3 으로 출력된다</p>
<ol>
<li>숫자</li>
<li>숫자</li>
<li>숫자</li>
</ol>
<p>일반 리스트는 *, +, - 중 아무거나 쓰면 된다.</p>
<ul>
<li>일반 리스트</li>
</ul>
<ul>
<li>일반 리스트</li>
</ul>
<ul>
<li>일반 리스트</li>
</ul>
<p>리스트 안에 두 문단이상 사용할 경우, tab을 사용한다.<br>계속해서 이어가려면 아래와 왼쪽 탭 정렬선을 맞춰줘야 한다.</p>
<ul>
<li>첫번째 리스트</li>
</ul>
<p>이어지는 문단1</p>
<p>이어지는 문단2</p>
<ul>
<li>두번째 리스트</li>
</ul>
<h3 id="이스케이프-문자"><a href="#이스케이프-문자" class="headerlink" title="이스케이프 문자"></a>이스케이프 문자</h3><p>태그로 변형되는 문자를 그냥 사용하고 싶을 때가 있습니다.(&gt;, - 등)</p>
<p>그냥 사용하면 md에서 해석해버리므로 앞에 \ 를 붙여줍니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\&gt; : 원래는 인용으로 표시됨</div><div class="line">1998\.서울올림픽 : 원래는 1.서울올림픽으로 표시됨(자동 넘버링)</div><div class="line">\- : 원래는 리스트로 표시됨</div></pre></td></tr></table></figure></p>
<p>> : 원래는 인용으로 표시됨</p>
<p>1998.서울올림픽 : 원래는 1.서울올림픽으로 표시됨</p>
<p>- : 원래는 리스트로 표시됨</p>
<h3 id="코드-블록"><a href="#코드-블록" class="headerlink" title="코드 블록"></a>코드 블록</h3><p>마크다운 내에서 코드를 표현 가능하다!<br>키보드 왼쪽 가장자리에 있는 ` 키를 사용하면 된다.<br>\<figure class="highlight plain"><figcaption><span>사용하는 언어를 넣어주면 해당 문법에 맞게 해석한다</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; \```javascript  </div><div class="line">&gt; var str = &apos;test str&apos;;  </div><div class="line">&gt; console.log(str);  </div><div class="line">&gt; \</div></pre></td></tr></table></figure></p>
<p>> 출력</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'test str'</span>;</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<h3 id="수평선"><a href="#수평선" class="headerlink" title="수평선"></a>수평선</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">편한대로 골라쓰면 된다.</div><div class="line"></div><div class="line">***</div><div class="line">* * *</div><div class="line">---</div><div class="line">- - -</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p>편한대로 골라쓰면 된다.</p>
<hr>
<h2 id=""><a href="#" class="headerlink" title="  *"></a><em> </em> *</h2><hr>
<h3 id="강조하기"><a href="#강조하기" class="headerlink" title="강조하기"></a>강조하기</h3><p>*나, _를 사용하여 표시한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*이탤릭*</div><div class="line">**볼드**</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><em>이탤릭</em></p>
<p><strong>볼드</strong></p>
<h3 id="취소선"><a href="#취소선" class="headerlink" title="취소선"></a>취소선</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~취소~~</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><del>취소</del></p>
<h3 id="링크-걸기"><a href="#링크-걸기" class="headerlink" title="링크 걸기"></a>링크 걸기</h3><p>링크 주소 자체에 링크를 거는 방법과, 문구를 사용하는 방법이 있다.<br>물론 상대경로도 가능하다!</p>
<ol>
<li>\<a href="http://주소\" target="_blank" rel="external">http://주소\</a></li>
<li>[링크걸 문구](<a href="http://주소\" target="_blank" rel="external">http://주소\</a>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;http://google.com&gt;</div><div class="line"></div><div class="line">[구글](http://google.com)</div><div class="line"></div><div class="line">상대경로 : [1번 포스트](/1)</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><a href="http://google.com" target="_blank" rel="external">http://google.com</a></p>
<p><a href="http://google.com" target="_blank" rel="external">구글</a></p>
<p>상대경로 : <a href="/1">1번 포스트</a></p>
<h3 id="이미지-삽입"><a href="#이미지-삽입" class="headerlink" title="이미지 삽입"></a>이미지 삽입</h3><p>![사진이름](사진경로)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![테스트사진](http://leader.pubs.asha.org/data/Journals/ASHANL/934378/NIB1_web.png)</div></pre></td></tr></table></figure>
<p>> 출력</p>
<p><img src="http://leader.pubs.asha.org/data/Journals/ASHANL/934378/NIB1_web.png" alt="테스트사진"></p>
<h3 id="테이블"><a href="#테이블" class="headerlink" title="테이블"></a>테이블</h3><p>| 와 - 로 구분하여 테이블을 그릴 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Field1 | Field2 | Field3</div><div class="line">-|-|-</div><div class="line">Data1 | Data2 | Data3</div><div class="line">Data4 | Data5 | Data6</div></pre></td></tr></table></figure></p>
<p>> 출력<br>Field1 | Field2 | Field3<br>-|-|-<br>Data1 | Data2 | Data3<br>Data4 | Data5 | Data6</p>
<p>헤드부분, 즉 html의 th부분은 꼭 있어야 한다! (상단 2줄)</p>
<h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><p>github은 emoji를 지원한다.<br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p>
]]></content>
      
        <categories>
            
            <category> etc </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[bash_profile과 bashrc]]></title>
      <url>/linux/bash-profile%EA%B3%BC-bashrc/</url>
      <content type="html"><![CDATA[<p>리눅스에서 alias를 수정하거나 PATH를 변경할 떄 접하게 되는 대표적인 4가지의 파일들..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/profile, /etc/bashrc, ~\.bash_profile, ~\.bash_rc</div></pre></td></tr></table></figure>
<p>각각의 파일에 대해 간단하게 알아보겠다.</p>
<p>일단 이에 대해 알기전에 <strong>Login Shell</strong>과 <strong>Non-Login Shell</strong>의 차이에 대해 알아야 한다.</p>
<h5 id="Login-Shell"><a href="#Login-Shell" class="headerlink" title="Login Shell"></a>Login Shell</h5><p>Shell을 실행할 때 로그인이 필요한 경우를 말한다.<br>ssh로 접속하거나, su 명령어로 다른계정을 들어갈 때 등이 해당된다.</p>
<blockquote>
<p>\/etc\/profile, ~\/.bash_profile 파일이 이 Shell이 뜰 때 실행되는 파일이다.</p>
</blockquote>
<h5 id="Non-Login-Shell"><a href="#Non-Login-Shell" class="headerlink" title="Non-Login Shell"></a>Non-Login Shell</h5><p>Shell을 실행할 떄 로그인이 필요하지 않은 경우를 말한다.<br>즉 Shell이 실행되는 모든 상황을 의미하게 됩니다.<br>GUI에서 터미널을 띄울때나, bash 명령어로 다시 bash를 실행하는 경우 등이 해당된다.</p>
<blockquote>
<p>\/etc\/bashrc, ~\/.bashrc 파일이 이 Shell이 뜰 때 실행되는 파일이다.</p>
</blockquote>
<p>Non-Login Shell은 Login Shell을 포함한다.<br>Login Shell이 실행될 때 profile과 bashrc 파일이 모두 실행되게 되고,<br>Non-Login Shell이 실행될 때 bashrc 파일만 실행되게 된다.</p>
<h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>\/etc\/profile 파일의 경우 전역적인 파일로 모든 사용자가 로그인 시 실행되며,<br>~\/.bash_profile 파일의 경우 지역적인 파일로 해당하는 사용자가 로그인 시만 실행된다.<br>또한 \/etc\/profile의 경우 어떠한 shell이든 상관없지만, ~\/.bash_profile의 경우 bash shell일 경우에만 해당된다.</p>
<h3 id="bashrc"><a href="#bashrc" class="headerlink" title="bashrc"></a>bashrc</h3><p>profile과 달리 Login 과정이 없으므로 shell을 실행시키는 사용자로 구분한다.<br>\/etc\/bashrc의 경우 모든 사용자가 shell을 실행시킬 때 마다 실행되며,<br>~\/.bashrc의 경우 해당하는 사용자가 shell 실행시킬 때 실행된다.</p>
<blockquote>
<p>profile의 경우 대부분 환경 변수같은 것을 명시하고 bashrc의 경우 alias 같은 것을 명시한다..(?)</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[사용자/그룹 관리]]></title>
      <url>/linux/%EC%82%AC%EC%9A%A9%EC%9E%90-%EA%B7%B8%EB%A3%B9-%EA%B4%80%EB%A6%AC/</url>
      <content type="html"><![CDATA[<p>리눅스는 여러명의 사용자가 동시에 로그인하여 시스템을 사용할 수 있는 멀티유저 운영체제이다.<br>이러한 사용자들은 각각 계정을 가지고 시스템에 접근하게 된다.<br>그리고 이 사용자들을 묶어서 관리할 수 있는 그룹이라는 것이 있다.<br>모든 사용자는 하나의 그룹을 가진다.  </p>
<h1 id="사용자-관리"><a href="#사용자-관리" class="headerlink" title="사용자 관리"></a>사용자 관리</h1><h4 id="etc-passwd-사용자-정보가-담긴-파일"><a href="#etc-passwd-사용자-정보가-담긴-파일" class="headerlink" title="/etc/passwd : 사용자 정보가 담긴 파일"></a>/etc/passwd : 사용자 정보가 담긴 파일</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line"></div><div class="line"># 사용자명:패스워드:UID:GID:사용자정보:홈디렉토리:쉘</div></pre></td></tr></table></figure>
<ol>
<li>사용자명 : 로그인 시 사용하는 사용자명.<ul>
<li>네이밍 규칙 : 영문자 대소문자, 숫자, “-“, “_”, “.” 사용 가능, 보통 1~32자 사용</li>
</ul>
</li>
<li>패스워드 : /etc/shadow 파일에 암호화되어 저장되어 있다.</li>
<li>UID : 사용자 고유 ID<ul>
<li>일반 사용자는 1000~60000을 사용한다(/etc/login.defs에 명시)<br>root 는 0으로 예약되어 있다.</li>
</ul>
</li>
<li>GID : 사용자가 속한 그룹 고유 ID</li>
<li>사용자정보 : 사용자에 대한 간단한 정보를 기입할 수 있다.</li>
<li>홈디렉토리 : 사용자 폴더. 로그인 시 최초 접속되는 폴더이기도 하다.</li>
<li>쉘 : 사용자가 사용하는 쉘 환경</li>
</ol>
<h3 id="사용자-추가"><a href="#사용자-추가" class="headerlink" title="사용자 추가"></a>사용자 추가</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; useradd [options] 사용자명 </div><div class="line"></div><div class="line"># options</div><div class="line"># -c [텍스트] : 사용자정보</div><div class="line"># -m : 홈디렉토리 생성</div><div class="line"># -M : 홈디렉토리 생성 안함</div><div class="line"># -d [폴더] : 홈디렉토리 지정</div><div class="line"># -N : 사용자 개인 그룹 생성하지 않음. default : 생성</div><div class="line"># -u [UID] : UID 직접 지정</div><div class="line"># -g [GID] : GID 직접 지정</div><div class="line"># -s [Shell] : shell 지정</div><div class="line"></div><div class="line"># 이 외에도 많은 옵션이 존재한다. useradd --help 를 활용한다.</div></pre></td></tr></table></figure>
<p>생성 시 사용하는 default 값을 확인하고 바꿀 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt; useradd -D</div><div class="line">GROUP=100</div><div class="line">HOME=/home</div><div class="line">INACTIVE=-1</div><div class="line">EXPIRE=</div><div class="line">SHELL=/bin/sh</div><div class="line">SKEL=/etc/skel</div><div class="line">CREATE_MAIL_SPOOL=no</div><div class="line"></div><div class="line">&gt; useradd -D -b /test</div><div class="line">&gt; useradd -D</div><div class="line">GROUP=100</div><div class="line">HOME=/test #변경됨</div><div class="line">INACTIVE=-1</div><div class="line">EXPIRE=</div><div class="line">SHELL=/bin/sh</div><div class="line">SKEL=/etc/skel</div><div class="line">CREATE_MAIL_SPOOL=no</div><div class="line"></div><div class="line"># 위에 대한 설정파일은 /etc/default/useradd 이다</div></pre></td></tr></table></figure></p>
<p>사용자 추가 시 홈 디렉토리에 생성되는 파일<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; useradd user1 -m</div><div class="line">&gt; cd /home/user1</div><div class="line">&gt; ls -al</div><div class="line">합계 32</div><div class="line">drwxr-xr-x 2 user1 user1 4096 10월 29 16:23 .</div><div class="line">drwxr-xr-x 4 root  root  4096 10월 29 16:23 ..</div><div class="line">-rw-r--r-- 1 user1 user1  220  9월  1  2015 .bash_logout</div><div class="line">-rw-r--r-- 1 user1 user1 3771  9월  1  2015 .bashrc</div><div class="line">-rw-r--r-- 1 user1 user1  655  6월 25  2016 .profile</div><div class="line">-rw-r--r-- 1 user1 user1 8980  4월 20  2016 examples.desktop</div><div class="line"></div><div class="line"># /etc/skel에 있는 파일을 복사해 사용한다.</div></pre></td></tr></table></figure></p>
<h3 id="사용자-수정"><a href="#사용자-수정" class="headerlink" title="사용자 수정"></a>사용자 수정</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt; usermod [options] 사용자명 </div><div class="line"></div><div class="line"># options</div><div class="line"># -c [텍스트] : 사용자정보 수정</div><div class="line"># -d [폴더] : 홈디렉토리 변경</div><div class="line"># -u [UID] : UID 변경</div><div class="line"># -s [Shell] : shell 지정</div><div class="line"># -L : 계정 락킹</div><div class="line"># -U : 계정 언락킹</div><div class="line"></div><div class="line"># -g [group] : 사용자 기본 그룹 변경</div><div class="line">  &gt; usermod -g user2 user1</div><div class="line">  # user1의 기본 그룹을 user2로 변경</div><div class="line"></div><div class="line"># -G [groups] : 사용자 그룹 추가,변경(제거). 기본 그룹은 영향을 받지 않는다.</div><div class="line">  &gt; usermod -a -G group1,group2 user1 </div><div class="line">  # user1에 group1,group2를 추가. -a 옵션은 기존그룹에 추가할지 안할지 여부이다.</div><div class="line">  &gt; usermod -G group1 user1</div><div class="line">  # 그룹을 제거하는 방법. -a를 주지 않아 기존 그룹을 유지하지 않았다.</div></pre></td></tr></table></figure>
<p>패스워드 변경<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; passwd [options] 사용자명</div><div class="line"></div><div class="line"># options</div><div class="line"># -d : 패스워드 삭제</div><div class="line"># -e : 패스워드 강제 만료</div><div class="line"># -l, -u : 패스워드 락킹/언락킹. usermod에 있는 -L, -U 옵션을 쓰는것이 더 좋다고 한다..</div></pre></td></tr></table></figure></p>
<h3 id="사용자-삭제"><a href="#사용자-삭제" class="headerlink" title="사용자 삭제"></a>사용자 삭제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">userdel [options] 사용자명</div><div class="line"></div><div class="line"># options </div><div class="line"># -r : 사용자의 홈디렉토리, 메일박스, 임시디렉토리 까지 같이 삭제.</div><div class="line">       그룹은 기본적으로 속한 사용자가 없으면 자동 삭제된다</div></pre></td></tr></table></figure>
<h1 id="그룹-관리"><a href="#그룹-관리" class="headerlink" title="그룹 관리"></a>그룹 관리</h1><h4 id="etc-group-그룹-정보가-담긴-파일"><a href="#etc-group-그룹-정보가-담긴-파일" class="headerlink" title="/etc/group : 그룹 정보가 담긴 파일"></a>/etc/group : 그룹 정보가 담긴 파일</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo:x:27:user1,user2</div><div class="line"></div><div class="line"># 그룹명:패스워드:GID:사용자리스트</div></pre></td></tr></table></figure>
<ol>
<li>그룹명 : 그룹의 이름이다</li>
<li>패스워드 : 그룹 패스워드</li>
<li>GID : 그룹 고유 ID</li>
<li>사용자리스트 : 해당 그룹에 속한 사용자들의 리스트.<br> 생략되는 경우도 많기 때문에 비어있다고 그룹에 속한 사용자가 없다고 확신할 수 없다.</li>
</ol>
<h3 id="그룹-추가"><a href="#그룹-추가" class="headerlink" title="그룹 추가"></a>그룹 추가</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; groupadd [options] 그룹명</div><div class="line"></div><div class="line"># options</div><div class="line"># -g [GID] : GID 지정</div></pre></td></tr></table></figure>
<h3 id="그룹-수정"><a href="#그룹-수정" class="headerlink" title="그룹 수정"></a>그룹 수정</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; groupmod [options] 그룹명</div><div class="line"></div><div class="line"># options</div><div class="line"># -n [이름] : 그룹명 변경</div></pre></td></tr></table></figure>
<h3 id="그룹-삭제"><a href="#그룹-삭제" class="headerlink" title="그룹 삭제"></a>그룹 삭제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; groupdel 그룹명</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[실행계획]]></title>
      <url>/db/%EC%8B%A4%ED%96%89%EA%B3%84%ED%9A%8D/</url>
      <content type="html"><![CDATA[<ul>
<li>실행계획 절차  </li>
</ul>
<ol>
<li>SQL 파서 모듈을 통해 작성된 SQL을 잘개 쪼갠다.(SQL 파스 트리 생성)</li>
<li>생성된 SQL 파스트리를 통해 옵티마이저가 불필요한 연산 제거, 어떤 인덱스를 사용할지, 어떤 테이블을 선행할지 등을 결정한다.</li>
<li>결정된 실행계획을 가지고 스토리지 엔진으로부터 데이터를 가져옴</li>
</ol>
<ul>
<li><p>옵티마이저 종류<br>규칙기반(rule based optimizer), 비용기반(cost based optimizer)가 있다.<br>거의 대부분이 CBO를 사용한다.</p>
</li>
<li><p>통계 정보<br>CBO에서 가장 중요한 정보이다. 통계정보가 잘못되면 엉뚱한 방향으로 쿼리가 실행될 수 있다.<br>MySQL은 통계정보가 다양하지 않은 편. 전체 레코드의 대략적 건수, 인덱스 유니크 값 개수 정도가 전부이다.<br>ANALYZE 명령으로 통계정보를 갱신할 수 있다.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> <span class="string">'테이블명'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>ANALYZE 명령 시,<br>MyISAM 테이블의 경우 쓰기는 불가능하고 읽기는 가능<br>InnoDB 테이블의 경우 쓰기와 읽기 둘 다 불가능</p>
<ul>
<li>실행계획 분석<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPLAIN</span> [쿼리]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>와 같이 입력하면 실행계획 표가 출력됨.<br>표의 로우는 사용하는 테이블의 개수만큼 출력됨(서브쿼리, 임시테이블 등 포함)<br>실행순서는 위에서 아래로<br>CRUD의 경우 실행계획 분석이 불가능하다. WHERE 절에 사용되는 부분만 따로 빼내서 실행계획을 분석하던지 해야 한다.</p>
<ol>
<li><p>id 칼럼<br>단위 SELECT 쿼리별로 부여되는 식별자 값(조인의 경우 같은 ID가 부여된다)  </p>
</li>
<li><p>select_type 컬럼</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Keira Knightly on her name(1주)]]></title>
      <url>/english/Keira-Knightly-on-her-name(1%EC%A3%BC)/</url>
      <content type="html"><![CDATA[<h3 id="본문"><a href="#본문" class="headerlink" title="본문"></a>본문</h3><blockquote>
<p><strong>Jimmy</strong> :<br>You have unusual name.<br>I knew you were coming, and I spelt it wrong, but I thought it was right.<br>I spelt “ie” insted of “ei”.<br>Is there proper way to spell it?  </p>
<p><strong>Keira</strong> :<br>Yeah.. that’s a… well… yes.<br>My mom spelt it wrong.  </p>
<p><strong>Jimmy</strong> :<br> I thoungt I was right.  </p>
<p><strong>Keira</strong> :<br>On my birth certificate.<br>I’m half named after a Russian ice skater that my dad fancied,<br>and half is Celtic name, because my mom is Scottish, so she wanted that.<br>Anyway, my mom went along to the place… where do you do the birth certificate?<br>I need to learn this as well.. don’t I?  </p>
<p><strong>Jimmy</strong> :<br>Oh yeah, they’ll do it at the hostpital. You don’t have to go anywhere.  </p>
<p><strong>Keira</strong> :<br>Anyway, she did the birth certificate, and showed it to my father,<br>and he was like,<br>“You’ve spelt her fucking name wrong!!”.<br>It’s not a surprise I’m dyslexic. Is it?<br>I had no change from the beginning…  </p>
<p><strong>Jimmy</strong> :<br>I guess you can’t really spell a name wrong, can you?<br>I mean, it’s whatever is it.</p>
<p><strong>Keira</strong> :<br>She did thought, she really did it.<br>It should be “ie”, but it isn’t.  </p>
<p><strong>Jimmy</strong> :<br>It’s not to late.</p>
<p><strong>Keira</strong> :<br>I should change it.</p>
<p><strong>Jimmy</strong> :<br>You should spell your son or daughter’s name wrong.</p>
<p><strong>Keira</strong> :<br>My kid’s name? OK, I’ll do that.</p>
<p><strong>Jimmy</strong> :<br>Yeah, do something that will haunt them for the rest of their life.</p>
<p><strong>Keira</strong> :<br>OK. exactly.</p>
</blockquote>
<h3 id="어휘"><a href="#어휘" class="headerlink" title="어휘"></a>어휘</h3><ol>
<li>as well : 또한, 역시</li>
<li>be like : ~라 말하다, 말하고 있다.</li>
<li>birth certificate : 출생 신고서</li>
<li>dyslexic : 독서 장애의, 난독증</li>
<li>exactly : 맞아(바로 그거야)</li>
<li>fancy : 끌리다, 반하다</li>
<li>haunt : 괴롭히다</li>
<li>name after : ~의 이름을 따서 명명하다</li>
</ol>
<h3 id="답답노트"><a href="#답답노트" class="headerlink" title="답답노트"></a>답답노트</h3><ul>
<li>술이 너무 부족했다.<blockquote>
<p>There was really not enough alcohol.</p>
</blockquote>
</li>
<li>청소년 수련원<blockquote>
<p>Youth traning center</p>
</blockquote>
</li>
<li>총무팀<blockquote>
<p>general affairs team</p>
</blockquote>
</li>
<li>얼마 안걸렸어.<blockquote>
<p>It didn’t take long.</p>
</blockquote>
</li>
<li>무슨 자신감이니?<blockquote>
<p>What confidence?</p>
</blockquote>
</li>
<li>의미만 전달하면 된다.<blockquote>
<p>I just have to convey meaning.</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> english </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[apt 명렁어]]></title>
      <url>/linux/apt-%EB%AA%85%EB%A0%81%EC%96%B4/</url>
      <content type="html"><![CDATA[<h1 id="패키지란"><a href="#패키지란" class="headerlink" title="패키지란"></a>패키지란</h1><p>커널 및 라이브러리 버전의 배포판 환경에 맞추어 빌드한 실행파일을 압축한 것.</p>
<h1 id="apt란"><a href="#apt란" class="headerlink" title="apt란"></a>apt란</h1><p>우분투에서 쓰이는 데비안 계열의 패키지를 관리하는데 쓰이는 도구이다.</p>
<p>저장소 리스트 : /etc/apt/sources.list</p>
<h3 id="패키지-리스트-업데이트"><a href="#패키지-리스트-업데이트" class="headerlink" title="패키지 리스트 업데이트"></a>패키지 리스트 업데이트</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get update</div></pre></td></tr></table></figure>
<p>> 실제 패키지를 업그레이드 하는 것이 아니라 사용가능한 패키지 리스트의 정보를 업데이트</p>
<h3 id="패키지-업데이트"><a href="#패키지-업데이트" class="headerlink" title="패키지 업데이트"></a>패키지 업데이트</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get upgrade</div></pre></td></tr></table></figure>
<p>> 실제 설치되어 있는 패키지들을 최신 버전으로 업그레이드</p>
<h3 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install [패키지명]</div></pre></td></tr></table></figure>
<h3 id="패키지-재설치"><a href="#패키지-재설치" class="headerlink" title="패키지 재설치"></a>패키지 재설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get --reinstall install [패키지명]</div></pre></td></tr></table></figure>
<h3 id="패키지-삭제"><a href="#패키지-삭제" class="headerlink" title="패키지 삭제"></a>패키지 삭제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get remove [패키지명] # 설정파일은 지우지 않음</div><div class="line">apt-get purge [패키지명] # 설정파일까지 지움</div></pre></td></tr></table></figure>
<h3 id="패키지-검색"><a href="#패키지-검색" class="headerlink" title="패키지 검색"></a>패키지 검색</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-cache search [패키지명]</div></pre></td></tr></table></figure>
<h3 id="패키지-정보"><a href="#패키지-정보" class="headerlink" title="패키지 정보"></a>패키지 정보</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-cache show [패키지명]</div></pre></td></tr></table></figure>
<p>apt 명령어를 이용해 설치한 패키지는 \/var\/cache\/apt\/archives 에 설치된다.</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[프로세스]]></title>
      <url>/linux/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</url>
      <content type="html"><![CDATA[<p>작업 : 작성한 프로그램 + 프로그램 실행에 필요한 데이터<br>작업이 커널에 등록되어 커널의 관리하에 있게 되면 이를 프로세스라고 부른다.<br>일반적으로 실행중인 프로그램을 말한다.</p>
<p>종속된 자식 프로세스는 부모 프로세스의 환경을 물려받으나 역은 성립하지 않는다.</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[파일/디렉토리 관리]]></title>
      <url>/linux/%ED%8C%8C%EC%9D%BC-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B4%80%EB%A6%AC/</url>
      <content type="html"><![CDATA[<ol>
<li>와일드 카드<br>? : 어떤 한 문자</li>
</ol>
<ul>
<li>: 어떤 문자도 없거나 그 이상<br>[] : [] 내에 지정된 각각의 문자<br>  [a-d] 는 a,b,c,d를 의미, [acd]는 a,c,d를 의미한다. [abcd]<em> 는 a,b,c,d로 시작하는 파일 모두를 의미한다.<br>  [abcd]?, [a-d]? 등등의 예시가 많다. “rm [abc]</em>“ 처럼 사용할 수 있다.</li>
</ul>
<ol>
<li>리다이렉션<br>표준 입출력을 키보드나 모니터가 아닌 파일로 받거나, 출력하는 것을 의미.</li>
</ol>
<p>표준 출력의 변경 : &gt;, &gt;&gt;<br>결과를 파일로 보냄, &gt;&gt;는 기존 파일의 내용을 유지한 채 내용을 추가할 떄 사용한다.</p>
<blockquote>
<p>access.log 와 같이 사용하면 access.log 파일의 내용을 모두 지우고 크기를 0으로 만들어 버릴 수 있다.<br>아무것도 없는 내용을 access.log에 전달하기 때문</p>
</blockquote>
<p>표준 입력의 변경 : &lt;<br>cat &lt; testFile 과 같이 사용. 표준 출력은 터미널로 하고 표준 입력에 키보드가 아닌 testFile 이라는 파일을 사용한다<br>일반적으로 cat 파일명 &lt; 파일명 의 형태가 많이 사용된다.</p>
<p>표준 에러 : 2&gt;, 2&gt;&gt;<br>에러 내용을 파일로 저장하고자 할 때 사용한다. ls /asdfas 2&gt; errorFile<br>2인 경우는 파일 디스크립터의 순서가 입력 0, 출력 1, 에러 2 이기 때문</p>
<p>표준출력과 표준에러를 한꺼번에 저장하려면 &amp;&gt;를 사용한다.<br>find / -name aa* &amp;&gt; errorLog</p>
<p>명령 &gt; 파일명 : 명령의 결과가 파일에 저장. 에러는 모니터로 출력<br>명령 2&gt; 파일명 : 에러 내용이 파일에 저장. 명령 결과는 모니터 출력<br>명령 &amp;&gt; 파일명 : 명령 결과, 에러 내용이 파일에 저장</p>
<ol>
<li>파이프라인<br>한 명령의 표준 출력을 다른 명령의 표준 입력으로 보내는 방식<br>사용되는 기호는 | 이며, |로 구분 되면 한 개 이상의 명령이 연속되어 나올 수 있다<br>이전 명령의 표준 출력이 다음 명령의 표준 입력이 되는 방식이다.<br>command1 | command2 | command3 | command4 …<br>1의 출력이 2의 입력, 2의 출력이 3의 입력, 3의 출력이 4의 입력…<br>|&amp;을 사용하면 표준출력 + 표준에러를 다음 명령의 표준 입력으로 사용할 수 있다.<br>$? 는 특수한 변수로써, 앞서 실행한 명령의 종료 상태값을 받는다.</li>
</ol>
<p>※ 파이프라인에 자주 사용되는 grep 명령어는 패턴에 맞는 문자열을 찾아주는 명령어이다.<br>grep 123 라고 입력하면, 사용자로부터 입력을 받아서 패턴에 맞을 경우 화면에 출력해준다.<br>grep만 입력하면 키보드로 표준 입력을 받는다. 보통은 파이프라인을 사용하여 명령의 결과값을<br>grep에게 표준입력으로 전달한다.</p>
<ol>
<li>기타(||, &amp;&amp;, ;, &amp;)<br>1) ; : 한줄에 여러 명령어 입력.<br> mkfs -t sfs -f /dev/sda5; mkdir /backup; mount /dev/sda5/backup 와 같이 사용<br> 하나의 작업을 기다렸다가 다시 입력하고 하는 방식보다 위와 같이 세미콜론으로 연결해서 사용 가능하다.</li>
</ol>
<p>2) &amp;&amp;, || : 앞에서 실행한 명령의 결과에 따라 다음 명령어 실행. 각 연산자의 특징을 이용하여 사용된다.<br>; 으로 연결했을 경우 앞의 명령의 실패여부에 관계없이 뒤의 명령이 무조건 실행된다.<br>포멧이 실패했는데 마운트가 되는 경우가 발생할 수도 있는 셈이다.<br>그리하여 &amp;&amp;과 ||를 써서 적절히 성공여부에 따라 명령을 조절할 수 있다.<br>&amp;&amp;의 경우 앞,뒤가 참이여야 하는 논리연산자이다.<br>그러므로 앞의 연산이 거짓일 경우, 뒤의 연산을 실행하지 않는다. -&gt; 이것이 중요하다.<br>cat asddd &amp;&amp; echo ‘test’ 해보면, asddd 파일이 없을 경우 첫번째 연산결과가 거짓이므로 뒤의 echo는 실행되지 않는다.<br>|| 또한 마찬가지다. ||는 둘중 하나만 참이면 되는 논리연산자이다.<br>그리므로 앞의 연산이 참일 경우, 뒤의 연산을 실행하지 않는다.<br>cat asddd || echo ‘test’ 했을 경우, 앞의 연산이 참이면 뒤의 연산이 실행되지 않는다.<br>즉, 위 두 연산자를 사용하려면 &amp;&amp;는 명령이 성공할 경우의 명령을 나열하면 되고, ||는 명령이 실패할 경우의 명령을 나열하면 되겠다.</p>
<p>3) &amp; : 백그라운드 모드로 실행<br>명령어 마지막에 &amp;를 붙여주면 백그라운드 모드로 실행 가능하다.</p>
<ol>
<li><p>디렉토리 구조<br>모든 디렉토리는 / 부터 시작한다.<br>.는 현재 디렉토리 ..는 부모 디렉토리 ~는 사용자의 홈 디렉토리를 의미한다.</p>
</li>
<li><p>파일<br>1) 일반 파일 : 우리가 평상시 쓰는 파일<br>2) 디렉토리 파일 : 파일을 포함하고 있는 파일. 일반 파일,디렉토리 파일, 특수 파일을 포함할 수 있다.</p>
<pre><code>근데 실제로 들어가보면 파일을 포함하고 있는 것이 아니라, 리눅스가 파일을 엑세스 하는데 필요한 정보를 가지고 있을 뿐이다.
</code></pre><p>3) 특수 파일 :</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[index]]></title>
      <url>/db/index/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[IOC 컨테이너와 DI]]></title>
      <url>/spring/IOC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-DI/</url>
      <content type="html"><![CDATA[<h1 id="IOC-컨테이너와-DI"><a href="#IOC-컨테이너와-DI" class="headerlink" title="IOC 컨테이너와 DI"></a>IOC 컨테이너와 DI</h1><p>어플리케이션 컨텍스트 = IOC + DI + 여러 기능(for making enterprise application)<br>(어플리케이션 컨텍스트는 실제 ApplicationContext 인터페이스를 구현한 클래스를 말한다.<br>ApplicationContext는 BeanFactory를 구현한 인터페이스이다.)  </p>
<p>이 어플리케이션 컨텍스트가 본격적인 IOC 컨테이너로 동작하려면 아래의 2가지가 필요하다.</p>
<blockquote>
<p>POJO, 설정 메타정보</p>
</blockquote>
<p>어플리케이션 컨텍스트 구현체, POJO, 설정 메타정보가 준비되었으면 이제 IOC 컨테이너로 등록하고 사용해야한다.<br>웹은 싱글 어플리케이션 처럼 main 메서드가 있는 것이 아니므로, 아래와 같은 방식을 통해 등록한다.  </p>
<ol>
<li>컨테이너가 기동될 떄 미리 어플리케이션 컨텍스트를 만든다.(web.xml의 listener, servlet등을 이용)</li>
<li>서블릿에서 요청이 올때마다 어플리케이션 컨텍스트에서 필요한 빈을 가져와 정해진 메서드를 실행한다.</li>
</ol>
<p>그림으로 보면 아래와 같다.<br><img src="https://user-images.githubusercontent.com/18513953/31042860-4ff60afc-a5ec-11e7-94da-0ac123c02e43.png" alt="image"><br>메타정보에 관해서는 아래에서 설명할 것인데, 일단은 우리가 잘 알고 있는 <strong>***-context.xml</strong> 파일이라고 생각하시면 됩니다.<br>컨테이너가 기동될 때 POJO 클래스와 메타정보를 조합하여 각종 빈 들이 만들어지고, 그들을 관리하는 IOC 컨테이너가 생성되게 됩니다.(DispatcherServlet)<br>그리고 각 HTTP 요청에 지정된 서블릿의 메서드가 실행될 때, 필요한 빈을 어플리케이션 컨텍스트에서 가져온 뒤 해당 메서드를 실행합니다.  </p>
<h2 id="컨테이너-계층구조"><a href="#컨테이너-계층구조" class="headerlink" title="컨테이너 계층구조"></a>컨테이너 계층구조</h2><p>스프링은 어플리케이션 컨텍스트를 계층구조로 가질 수 있다.</p>
<p>빈 탐색 : 자식 -&gt; 부모<br>부모에서 자식을 찾을 수 없으며, 형제 컨텍스트의 빈도 검색 불가능.<br>자식과 부모에 중복된 이름의 빈이 있을 경우 자식의 빈을 사용(피해야 할 상황)  </p>
<p>하나의 컨텍스트에 정의된 AOP의 경우 다른 컨텍스트의 빈에는 영향을 미치지 않음<br>상황에 따라 다른 설정을 사용해야 할 경우, 그런데 중요한 설정을 공유해야 할 경우 사용하면 효율적.<br>그러나 제대로 알지 못하고 사용하면(계층구조, 탐색순서) 예기치 못한 에러를 만날 수 있음</p>
<h3 id="웹-어플리케이션-컨테이너-계층구조"><a href="#웹-어플리케이션-컨테이너-계층구조" class="headerlink" title="웹 어플리케이션 컨테이너 계층구조"></a>웹 어플리케이션 컨테이너 계층구조</h3><p>웹 어플리케이션 레벨에 등록하는 루트 컨테이너,<br>어플리케이션에 등록된 서블릿들이 각각 자신의 컨테이너를 가지는 구조가 대표적인 경우이다.<br>일반적으로 스프링을 사용하여 웹 개발을 할 경우 프론트 컨트롤러 패턴을 사용하므로 대부분 아래와 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">서블릿 어플리케이션 컨텍스트 -&gt; 루트 어플리케이션 컨텍스트</div></pre></td></tr></table></figure></p>
<p>프론트 컨트롤러 패턴임에도 굳이 계층구조로 형성하는 이유는 아래와 같은 상황을 대비하기 위함이다 ㅎㅎ<br><img src="https://user-images.githubusercontent.com/18513953/31043947-8ff5225a-a600-11e7-83ae-a7ddda60d0fb.png" alt="image"><br>스프링의 유틸리티 메소드를 사용하면 간단하게 어플리케이션 컨텍스트를 얻어올 수 있다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WebApplicationContextUtils.getWebApplicationContext(ServletContext)</div></pre></td></tr></table></figure></p>
<p>ServletContext는 웹 어플리케이션마다 하나씩 만들어지는것이므로<br>HttpServletRequest나 HttpSession 오브젝트만 있으면 간단히 얻을 수 있다.</p>
<h4 id="루트-어플리케이션-컨텍스트-등록"><a href="#루트-어플리케이션-컨텍스트-등록" class="headerlink" title="루트 어플리케이션 컨텍스트 등록"></a>루트 어플리케이션 컨텍스트 등록</h4><p>서블릿 컨텍스트의 생성/소멸을 알려주는 web.xml의 listener를 사용하여 등록한다.<br>스프링이 제공해주는 리스너로는 ServletContextListener를 구현한 ContextLoaderListener가 있다.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>contextConfigLocation<br>설정파일의 위치를 바꿔줄 때 사용<br>리소스 로더 접두어, ant식 경로표기법 사용가능</p>
</li>
<li><p>contextClass<br>어플리케이션 컨텍스트 클래스를 바꿔줄떄 사능</p>
</li>
</ul>
<p>지정해주지 않을 경우 default로 class는 XmlWebApplicationContext, xml 파일 위치는 /WEB-INF/applicationContext.xml 을 사용한다.</p>
<h4 id="서블릿-어플리케이션-컨텍스트-등록"><a href="#서블릿-어플리케이션-컨텍스트-등록" class="headerlink" title="서블릿 어플리케이션 컨텍스트 등록"></a>서블릿 어플리케이션 컨텍스트 등록</h4><p>스프링 웹 기능을 지원하는 프론트 컨트롤러 서블릿인 DispatcherServlet은<br>초기화시에 자신만의 컨텍스트를 생성하고 초기화하고,<br>웹 어플리케이션 레벨에 등록된 어플리케이션 컨텍스트를 찾아서 자신의 부모 컨텍스트로 사용한다.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>이클립스에서 Sprig MVC 프로젝트를 만들었을 때 생성되는 기본 구조이다.<br>루트 어플리케이션 컨텍스트를 만들 때 처럼 설정파일의 위치나 클래스를 변경해 줄 수 있다.<br>(파라미터는 루트 어플리케이션 컨텍스트와 동일하고, init-param을 사용한다는 것만 다르다.)</p>
<p>지정해주지 않을 경우 default로 class는 XmlWebApplicationContext, xml 파일 위치는 /WEB_INF/{서블릿 네임}-context.xml 을 사용한다.</p>
<p>루트 어플리케이션 컨텍스트에 등록되는 빈 들은 각각 성격이 구분되므로 여러 설정파일로 나누고,<br>서블릿 어플리케이션 컨텍스트의 경우 성격이 비슷하므로 디폴트 설정파일 위치를 사용하는 것이 일반적이라고 한다(근데 위는 왜 저렇지..)</p>
<h3 id="IoC-DI를-위한-빈-설정-메타정보-작성"><a href="#IoC-DI를-위한-빈-설정-메타정보-작성" class="headerlink" title="IoC/DI를 위한 빈 설정 메타정보 작성"></a>IoC/DI를 위한 빈 설정 메타정보 작성</h3><p>앞서 언급한 빈 설정 메타정보에 대해 알아보겠다.</p>
<p>IoC 컨테이너는 설정 메타정보를 참고하여 POJO 오브젝트들을 빈으로 등록한다.</p>
<p>설정 메타정보라고 하면 보통 우리에게 익숙한 *-context.xml 파일등이 떠오르게 되는데, 이는 사실 실제 설정 메타정보는 아니다.</p>
<p>아래의 그림을 보면 쉽게 이해할 수 있다.</p>
<p><img src="https://user-images.githubusercontent.com/18513953/31396515-8b47cc00-ae1e-11e7-85e4-3a756f5d71bf.png" alt="image"></p>
<p>정확하게 말해 설정 메타정보란 <strong>BeanDefinition</strong>이라는 순수 오브젝트를 의미한다.</p>
<p>우리가 작성하는 xml파일, 어노테이션 등은 모두 적절한 리더기에 의해 BeanDefinition 오브젝트로 변환되는 것이다!</p>
<p>BeanDefinition에는 IoC 컨테이너가 빈을 만들 때 필요한 핵심정보가 담겨 있다.<br>그러나 필수항목 몇개를 제외하면 대부분 디폴트 값을 그대로 사용한다.</p>
<p>빈 등록법</p>
<ol>
<li><p>\<bean\> 태그 : 가장 강력하면서도 심플한 방법</bean\></p>
</li>
<li><p>네임스페이스 &amp; 전용태그 : 1번의 문제점을 보완한 방식이다.<br>1번의 경우 모두 \<bean\> 태그로 통일하기 때문에 구분이 잘 안된다는 단점이 있다.<br>(스프링은 자신에게 필요한 설정정보에도 DI를 사용하기 때문에 이런 현상이 벌어지는 것이다.)<br>그래서 각각의 성격에 맞게 네임스페이스와 태그를 제공한다.<br>ex) \<aop:pointcut ..="" \=""><br>가독성, 필수 프로퍼티, 클래스 선택, 다중 클래스 등록 등 많은 이점이 있다.</aop:pointcut></bean\></p>
</li>
<li><p>빈 스캐닝<br>빈 스캐너를 이용하여 인자로 전달한 패키지 아래의 클래스들을 검사한다.<br>@Component나 @Component를 메타 어노테이션으로 가지는 애들을 빈으로 등록한다.<br>이런 형태의 어노테이션을 스프링에선 <strong>스테레오 타입</strong>이라고 부른다<br>스캐닝으로 등록되는 빈은 이름을 등록하지 않으면 default로 클래스명에서 앞글자만 소문자로 사용한다.<br>어노테이션 디폴트값을 이용해 빈 이름을 지정할 수 있다. ex) @Component(“test”)<br>xml 작성 방법보다 간편하게 빈을 등록할순 있으나, 등록된 빈 들을 한눈에 볼 수 없다는 단점이 있다.<br>또한 xml 처럼 상세 메타정보 항목을 지정할 수 없고(한계가 있음), 클래스당 1개의 빈만 등록할 수 있다.</p>
</li>
</ol>
<p>빈 스캐닝이 편리하긴 하지만 각각의 상황에 따라 xml과 빈 스캐닝을 적절히 선택하는 것이 좋다(세밀한 관리가 필요할 경우 등)</p>
<p>빈스캐너 등록법<br>xml : \<context:component-scan base-package="..." \=""><br>컨텍스트 : 어플리케이션 컨텍스트 등록 시 contextClass로 AnnotationConfigWebApplicationContext 사용</context:component-scan></p>
<ul>
<li>스테레오 타입 종류<br>@Repository : DAO, repository<br>@Service : service<br>@Controller : mvc controller<blockquote>
<p>특정계층으로 분류하기 힘든 경우는 @Component를 사용하는 것이 바람직</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>빈 스캐닝 시 컨테이너 계층 구조에서 유의할 점이 있다.<br>부모 컨테이너와 자식 컨테이너의 빈 스캐닝 지점이 같은 곳을 바라보고 있을 경우 아래와 같은 문제점이 발생할 수 있다.<br><img src="https://user-images.githubusercontent.com/18513953/32144077-bc69b2d0-bcf6-11e7-9544-f6726765c034.png" alt="image"><br>탐색의 순서가 자식 -&gt; 부모의 순서이므로 위의 경우 AOP, TX가 적용된 UserService 빈을 사용하지 못하게 된다.</p>
</blockquote>
<h3 id="java-config"><a href="#java-config" class="headerlink" title="java config"></a>java config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span> <span class="comment">// &lt;beans&gt;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span></span>&#123;</div><div class="line">    <span class="meta">@Bean</span> <span class="comment">// &lt;bean&gt;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Hello <span class="title">hello</span><span class="params">()</span></span>&#123; <span class="comment">// method name == bean name</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>등록 방법 : AnnotationConfigWebApplictionContext 생성자 파라미터로 패키지 대신 위의 클래스를 넣어주면 된다.</p>
<p>@Configuration이 붙은 클래스도 빈으로 등록된다! (빈 이름 == 클래스명(첫글자 소문자))</p>
<ul>
<li><p>일반적인 자바 코드와 다른점(유의사항)<br>@Bean 아래 메서드에서 new로 인스턴스를 생성했지만 실제로 빈을 가져다 사용해보면 계속해서 같은 오브젝트가 리턴된다(직접 실행해도 마찬가지이다)</p>
<blockquote>
<p>@Configuration내에 @Bean만 해당함</p>
</blockquote>
</li>
<li><p>자바 설정파일을 사용할 때의 장점  </p>
<ol>
<li>컴파일러나 IDE를 통한 검증이 가능하고, IDE의 기능을 최대한 이용할 수 있음.<br>XML은 텍스트이기 떄문에 한계가 있다.</li>
<li>@Bean 자체가 자바 메서드이기 때문에 복잡한 빈 등록도 팩토리 빈 없이 쉽게 등록할 수 있다.</li>
</ol>
</li>
<li><p>자주 사용하는 빈 등록 방법</p>
</li>
</ul>
<ol>
<li>XML 단독 사용<br> 생성되는 모든 빈을 XML에서 확인할 수 있는 장점이 있는 반면, 빈의 개수가 많아지면 XML 파일을 관리하기 번거로울 수 있다.<br> 설정을 분리하고 순수한 POJO 코드를 유지하고 싶을 떄 사용할 수 있다.<br> 커스텀 태그나 전용태그를 사용할 경우 장점이 부각된다.<br> 스프링이 제공하는 모든 빈 설정을 할 수 있는 유일한 방법이다.</li>
<li>XML + 빈 스캐닝<br> 3계층 빈 클래스은 빈 스캔을 사용하고(복잡한 메타정보가 필요없으므로), 복잡한 설정 정보는 XML을 사용한다.  </li>
<li>XML 없이 단독 스캐닝 사용<br> 자바 설정파일이 반드시 필요하다.<br> 루트/서블릿 어플리케이션 컨텍스트를 전부 AnnotationConfigWebApplicationContext로 변경하고, @Configuration 클래스 파일을 빈 설정 대상에 포함시킨다.<br> 스프링이 제공하는 전용 태그를 사용할 수 없다는 단점이 있다.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[3장-영속성관리]]></title>
      <url>/jpa/3%EC%9E%A5-%EC%98%81%EC%86%8D%EC%84%B1%EA%B4%80%EB%A6%AC/</url>
      <content type="html"><![CDATA[<p>엔티티 매니저 : 엔티티를 저장하는 가상의 데이터베이스로 볼 수 있다.(엔티티 저장,수정,삭제 등)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 엔티티 매니저를 생성하기 위해선 공장이 필요하다.</div><div class="line">EntityManagerFactory emf = Persistence.createEntityManagerFactory(&quot;영속성 유닛&quot;);</div><div class="line">// 엔티티 매니저 생성</div><div class="line">EntityManger em = emf.createEntityManger();</div></pre></td></tr></table></figure>
<p>공장을 만드는 과정은 굉장히 비용이 많이들고, 공장에서 Entity Manager를 생성하는 과정은 비용이 거의 들지 않는다.<br>그러므로 EntityMangerFactory는 하나만 만들어서 어플리케이션 전체에서 공유해야 한다.</p>
<blockquote>
<p>엔티티 매니저 팩토리는 여러 스레드가 동시에 접근해도 안전하지만 엔티티 매니저는 그렇지 않다(동시성 문제). 절대 공유해선 안된다.<br><img src="https://user-images.githubusercontent.com/18513953/31942438-3a09b74e-b900-11e7-945d-28fac97bc197.png" alt="image"></p>
</blockquote>
<p>위는 JPA를 사용하는 일반적인 웹 어플리케이션의 모습이다.<br>대부분의 JPA 구현체는 EntityManagerFactory를 만들 때 커넥션 풀을 생성한다.<br>그리고 Entity Manager는 필요한 시점(대부분 트랜잭션을 시작할 때)까지 db 커넥션을 얻지 않는다.  </p>
<h3 id="영속성-컨텍스트"><a href="#영속성-컨텍스트" class="headerlink" title="영속성 컨텍스트"></a>영속성 컨텍스트</h3><p>엔티티를 영구 저장하는 <strong>논리적인</strong> 환경을 말한다.</p>
<p>엔티티 매니저를 생성하면 영속성 컨텍스트가 만들어지고, 엔티티 매니저를 통해 영속성 컨텍스트에 접근/관리 할 수 있다.</p>
<h3 id="엔티티-생명주기"><a href="#엔티티-생명주기" class="headerlink" title="엔티티 생명주기"></a>엔티티 생명주기</h3><p>엔티티에는 4가지 상태가 존재한다.</p>
<ol>
<li><p>비영속<br>간단하게 엔티티 객체를 생성한 상태를 얘기한다.<br>영속성 컨텍스트나 데이터베이스와는 전혀 관련이 없는 상태이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
</li>
<li><p>영속<br>엔티티 매니저를 통해 엔티티를 영속성 컨텍스트에 저장한(엔티티가 영속성 컨텍스트에 의해 관리되는) 상태이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 아래와 같은 상황들이 영속상태를 만든다</span></div><div class="line">em.persist(entity);</div><div class="line">em.find(entity_id);</div></pre></td></tr></table></figure>
</li>
<li><p>준영속<br>영속성 컨텍스트가 더이상 엔티티를 관리하지 않으면 준영속 상태가 된다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">em.detach(entity);</div><div class="line"></div><div class="line">em.clear();</div><div class="line">em.close();</div></pre></td></tr></table></figure>
</li>
<li><p>삭제<br>엔티티를 영속성 컨텍스트와 데이터베이스에서 삭제한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em.remove(entity);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="영속성-컨텍스트-특징"><a href="#영속성-컨텍스트-특징" class="headerlink" title="영속성 컨텍스트 특징"></a>영속성 컨텍스트 특징</h3><ul>
<li>엔티티는 무조건 식별자 값이 있어야한다.</li>
<li>영속성 컨텍스트 -&gt; 데이터베이스는 트랜잭션을 커밋하는 순간에 일어난다. 이를 flush라고 한다.</li>
</ul>
<ol>
<li>엔티티 조회<br>영속성 컨텍스트는 내부 캐시를 가지고 있다. 영속 상태로 관리되는 엔티티는 전부 이 캐시에 저장된다.<br>캐시의 형태는 Id와 entity가 key/value로 저장된 map으로 보면 된다.<br>find 등을 통해 엔티티를 조회할 때 이 캐시를 먼저 조회하고, 없으면 데이터베이스에서 조회한다.<br>persist로 저장한 엔티티, find로 찾은 엔티티(데이터베이스에서 조회해온)가 1차 캐시 저장 대상이다.<br><img src="https://user-images.githubusercontent.com/18513953/32005391-274f5db8-b9df-11e7-8cf2-030f5c69461e.png" alt="image"><br>간단히 설명하면 위의 그림과 같다.</li>
</ol>
<h4 id="영속-엔티티의-동일-동등성"><a href="#영속-엔티티의-동일-동등성" class="headerlink" title="영속 엔티티의 동일/동등성"></a>영속 엔티티의 동일/동등성</h4><ul>
<li>동일성 : 인스턴스가 같다. ==로 비교함  </li>
<li>동등성 : 인스턴스가 가지고 있는 값이 같다. equlas로 비교함 </li>
</ul>
<p>1차 캐시에서 가져온 엔티티의 경우는 동일성이 성립하는 특징이 있다.<br>Map에서 인스턴스를 가져온 것이기 때문에 어찌보면 당연하다!!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">User user1 = em.find(User.class, <span class="string">"uid1"</span>);</div><div class="line">User user2 = em.find(User.class, <span class="string">"uid1"</span>);</div><div class="line"></div><div class="line">Assert.assertTrue(user1==user2);</div></pre></td></tr></table></figure></p>
<h3 id="엔티티-등록"><a href="#엔티티-등록" class="headerlink" title="엔티티 등록"></a>엔티티 등록</h3><p>아래는 엔티티 등록 예제이다<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">EntityManager em = emf.createEntityManager();</div><div class="line">EntityTransaction transaction = em.getTransaction();</div><div class="line"></div><div class="line">transaction.begin(); <span class="comment">// 트랜잭션 시작 필수</span></div><div class="line"></div><div class="line">Member member1 = ...;</div><div class="line">Member member2 = ...;</div><div class="line"></div><div class="line">em.persist(member1);</div><div class="line">em.persist(member2);</div><div class="line"><span class="comment">// insert를 db에 날리지 않음</span></div><div class="line"></div><div class="line">transaction.commit(); <span class="comment">// flush</span></div></pre></td></tr></table></figure></p>
<p><img src="https://user-images.githubusercontent.com/18513953/32134414-f7cced6c-bc27-11e7-80a9-ddbabcc51c8f.png" alt="image"><br>위는 엔티티등록 과정을 간단히 그림으로 나타낸 것이다.<br>보다시피 persist 명령어를 수행했을 때, 아래의 행위를 한다.</p>
<ol>
<li>영속성 컨텍스트에 엔티티 저장</li>
<li>수행될 SQL을 SQL 저장소에 저장  </li>
<li>최종 커밋 시 영속성 컨텍스트를 플러시(db에 반영)한다.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> jpa </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[관리자 권한 전환]]></title>
      <url>/linux/%EA%B4%80%EB%A6%AC%EC%9E%90-%EA%B6%8C%ED%95%9C-%EC%A0%84%ED%99%98/</url>
      <content type="html"><![CDATA[<p>Windows에서 최고 관리자가 <strong>Administrator</strong>였다면, 리눅스에서는 <strong>root</strong>입니다.<br>보안상의 이유로 root로 직접 로그인하는 것은 권장되지 않고,<br>일반 사용자로 로그인 한 뒤, 필요시에 root 권한으로 작업하는 것을 권장합니다.  </p>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>일반 사용자가 root 권한으로 명령어를 실행하고자 할 떄 사용하는 명령어입니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cat /etc/shadow</div></pre></td></tr></table></figure></p>
<p>당연히 누구나 사용할 순 없고, 허가된 사용자만이 사용 가능한 명령어입니다.<br>이를 확인하기 위해선 <strong>/etc/sudoers</strong> 파일을 확인해야 합니다.</p>
<p>현재 우분투를 사용하고 있으므로, 우분투를 기점으로 해당 파일을 열어봤을때<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Allow members of group sudo to execute any command</div><div class="line">%sudo   ALL=(ALL:ALL) ALL</div></pre></td></tr></table></figure></p>
<p>부분을 발견할 수 있습니다.  </p>
<p>보다시피 <strong>sudo 그룹</strong>에 해당하는 멤버들은 모든 명령어를 사용할 수 있다고 명시되어 있습니다.<br>(기본적으로 관리자 계정으로 등록된 사용자는 sudo 그룹에 소속되어 있음)</p>
<p>그럼 유저를 하나 만들고, sudo 명령어를 사용 가능하도록 만들어보겠습니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 먼저 사용자 추가를 위해 root 계정으로 변경합니다. (su 명령어는 아래서 설명)</div><div class="line">&gt; su -</div><div class="line"></div><div class="line"># user1 추가 및 패스워드 설정</div><div class="line">&gt; useradd -m user1</div><div class="line">&gt; passwd user1</div><div class="line"></div><div class="line">&gt; su - user1</div><div class="line">&gt; sudo cat /etc/shadow</div><div class="line">[sudo] password for user1: </div><div class="line">user1 is not in the sudoers file.  This incident will be reported.</div><div class="line"># sudo 명령어를 실행할 수 없다.</div><div class="line"></div><div class="line"># user1에 sudo 그룹을 추가</div><div class="line">&gt; su - </div><div class="line">&gt; usermod -G sudo user1</div><div class="line"></div><div class="line"># 다시 실행</div><div class="line">&gt; su - user1</div><div class="line">&gt; sudo cat /etc/shadow</div><div class="line">[sudo] password for user1: </div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">.....</div><div class="line"># 출력이 잘 된다!</div></pre></td></tr></table></figure>
<p>sudo 명령어를 통해 root 권한으로 명령어를 실행하고 나면 다시 일반 사용자 권한으로 돌아오게 됩니다.<br>sudo 명령어 실행 시 입력한 암호는 5분 동안 유지됩니다! (5분간 암호를 재입력하지 않아도 됨)</p>
<h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>sudo 처럼 잠시 관리자 권한을 빌려오는 것이 아니라, 아예 관리자 권한으로 전환할 때 사용합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; su - </div><div class="line">암호 :</div><div class="line">root@:~#</div></pre></td></tr></table></figure></p>
<p>- 옵션을 주어야 root 사용자의 환경변수까지 다 읽어오게 됩니다.<br>입력하지 않을 경우 환경변수가 없어 명령어를 찾지 못하는 현상이 발생할 수도 있습니다.</p>
<p>su 뒤에 사용자명을 입력하여 root가 아닌 다른 사용자로 전환할 수도 있습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; su - user2</div><div class="line">암호 : </div><div class="line">user2@:~$</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo와 github pages로 블로그 만들기]]></title>
      <url>/etc/hexo%EC%99%80-github-pages%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      <content type="html"><![CDATA[<p>이번엔 앞서 작성한 github-pages에 블로그 서비스를 하기 위해 </p>
<p>정적 사이트 생성 도구인 hexo에 대해 알아보겠습니다.</p>
<p><br></p>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>블로그 형태의 정적사이트를 생성하는데 사용되는 도구입니다.</p>
<p>hexo는 사용자가 작성한 포스트(markdown 등)을 읽어서, </p>
<p>정적파일 생성기를 통해 웹서버에 바로 서비스 할 수 있는 형태의 정적 웹사이트를 만들어냅니다.</p>
<p>대표적인 것으로 jekyll이 있지만 hexo가 좀 더 편해보이고 테마도 맘에 들어서 hexo를 사용하기로 했습니다 ㅎㅎ</p>
<p><br></p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><blockquote>
<p>사전준비 : Node.js,npm,git</p>
</blockquote>
<p>바로 설치하고 초기화 해보겠습니다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div><div class="line">hexo init <span class="string">'폴더명'</span></div></pre></td></tr></table></figure>
<p>‘폴더명’에 입력한 폴더를 만들고 그 폴더에 hexo 관련 파일을 초기화합니다.</p>
<p>(폴더를 지정하지 않으면 현재 폴더에 초기화하는데, 현재 폴더가 비어있는 상태여야 합니다.)</p>
<p>아래는 초기화 후 폴더 모습입니다!</p>
<p><img src="https://user-images.githubusercontent.com/18513953/30768882-f384f9ba-a049-11e7-8e1c-66bb64603b72.png" alt="image"></p>
<p>빨간색으로 표시해둔 <strong>_config.yml</strong>에서 블로그에 대한 대부분의 설정을 할 수 있습니다.<br><br><br><br></p>
<p>초기화가 완료되면 간단하게 로컬에서 테스트 해보도록 할까요</p>
<p>해당 폴더로 이동하여</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>라고 입력하면, </p>
<blockquote>
<p>INFO  Start processing</p>
<p>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>라는 메시지와 함께 <strong><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></strong> 으로 접속 가능합니다.</p>
<p>기본 테마로 생성된 정적 블로그 페이지를 볼 수 있을 것입니다 ㅎㅎ</p>
<p><br></p>
<h2 id="테마-적용"><a href="#테마-적용" class="headerlink" title="테마 적용"></a>테마 적용</h2><p>하지만 이대로 사용할 순 없으니 테마를 한번 적용해보도록 하죠.</p>
<p>적용방법은 매우 간단합니다.</p>
<p><a href="https://hexo.io/themes/index.html" target="_blank" rel="external">https://hexo.io/themes/index.html</a></p>
<p>위의 주소에 접속한 뒤, 마음에 드는 테마를 고르시면 됩니다.</p>
<p>각 테마의 github 페이지에 들어가면 테마 적용 방법에 대한 상세한 설명이 있으니 별로 어려움 없으실 겁니다 ㅎㅎ</p>
<p>제가 고른 테마는 Material Flow 라는 테마입니다.</p>
<blockquote>
<p>gitgub : <a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="external">https://github.com/stkevintan/hexo-theme-material-flow</a></p>
</blockquote>
<p>보시다시피 매우 간단합니다. 소스를 clone받고 _config.yml에서 해당 테마로 지정해주기만 하면 됩니다.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">material-flow</span></div></pre></td></tr></table></figure>
<p>설정이 다 되었으면 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate <span class="comment"># 정적 리소스 생성</span></div></pre></td></tr></table></figure>
<p>와 같이 입력하여 정적 리소스를 생성해주면 됩니다.</p>
<p>간혹 제대로 되지 않는 경우도 있기 떄문에 clean도 한번 해줬습니다.</p>
<p>이제 다시 hexo server 입력 후 들어가보시면 테마가 잘 적용되어 있음을 보실 수 있습니다!</p>
<p><br></p>
<h2 id="글을-써보자"><a href="#글을-써보자" class="headerlink" title="글을 써보자"></a>글을 써보자</h2><p>블로그를 만들었으니 글을 써야겠네요.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new post [post_name]</div><div class="line"><span class="comment"># ex) hexo new post 'first post'</span></div><div class="line"><span class="comment"># ex) hexo new post first-post</span></div></pre></td></tr></table></figure>
<p>과 같이 입력하면, <figure class="highlight plain"><figcaption><span>폴더에 아래와 같은 형태로 markdown 파일이 하나 생성됩니다.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```md</div><div class="line">---</div><div class="line">title: first post</div><div class="line">date: 2017-09-23 10:51:08</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>각종 폴더나 카테고리에 대한 설정도 <strong>_config.yml</strong>에서 할 수 있으니 각자 설정하시면 됩니다 ㅎㅎ</p>
<p><br><br><br></p>
<h2 id="배포"><a href="#배포" class="headerlink" title="배포"></a>배포</h2><p>이제 github에 배포해보도록 하겠습니다 ㅎㅎ</p>
<p>먼저 <strong>_config.yml</strong>에 deploy 관련 설정을 해 줍니다.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/joont92/joont92.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p>저장한 뒤</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line"></div><div class="line">hexo generate <span class="comment"># 정적파일 생성하고</span></div><div class="line">hexo deploy <span class="comment"># 배포!</span></div><div class="line"></div><div class="line"><span class="comment"># hexo deploy --generate 로도 가능</span></div></pre></td></tr></table></figure>
<p>와 같이 해주면 끝입니다. 매우 간단하죠??</p>
<p><br></p>
<h4 id="배포시-아래와-같은-메시지와-함께-배포가-되지-않는-경우"><a href="#배포시-아래와-같은-메시지와-함께-배포가-되지-않는-경우" class="headerlink" title="배포시 아래와 같은 메시지와 함께 배포가 되지 않는 경우"></a>배포시 아래와 같은 메시지와 함께 배포가 되지 않는 경우</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure>
<p><strong>hexo-deployer-git</strong> 플러그인을 설치해주면 됩니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deloyer-git --save</div></pre></td></tr></table></figure>
<p><br></p>
<p>여기까지입니다 ㅎㅎ</p>
<p>블로그에 markdown을 사용할 수 있고, git의 형상관리를 블로그에 사용할 수 있다니 매우 좋은것 같네요.</p>
<p>들려주셔서 감사합니다~~</p>
]]></content>
      
        <categories>
            
            <category> etc </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[1장 - JPA소개]]></title>
      <url>/jpa/1%EC%9E%A5-JPA%EC%86%8C%EA%B0%9C/</url>
      <content type="html"><![CDATA[<p>※ ORM은 객체지향과 관계형 데이터베이스의 상위 단계이므로 학습곡선이 높다.<br>SQL Mapper : Mybatis, JdbcTemplate..<br>JPA : Hibernate, EclipseLink..</p>
<p>기존 JDBC<br>엔티티 &lt;&gt; SQL 매핑을 항상 해줘야함.<br>엔티티는 SQL에 의존적임. 그러므로 엔티티를 신뢰할 수 없다.(항상 결국엔 SQL을 확인해야함)<br>엔티티는 SQL을 자바로 가져오기 위해 존재하는 도메인 객체 역할 정도밖에 안됨.</p>
<p>그에 반해 JPA는 JPA가 사용하는 API에 엔티티를 넣어주면 자동으로 SQL 쿼리를 만들어 실행해주므로 엔티티를 신뢰할 수 있다.</p>
<p>자바 객체와 RDB의 패러다임 불일치<br>1) 상속<br>abstract class Item{<br>    Long Id;<br>    String name;<br>    int price;<br>}<br>class Album Extends Item{<br>    String artist;<br>}<br>class Movie Extends Item{<br>    String director;<br>}<br>자바는 위와 같이 상속구조가 가능하나, RDB는 상속구조가 없다.<br>데이터 모델링의 DTYPE을 이용하면 상속 비슷하게 구현할 수 있긴하다.</p>
<p>※ DTYPE<br>Table ITEM{<br>    ID(PK),<br>    NAME,<br>    PRICE..<br>    DTYPE<br>}<br>Table ALBUM{     // ITEM과 연결<br>    ID(PK, FK)    ,<br>    ARTIST<br>}</p>
<p>모델링에서 위와 같이 DTYPE을 이용해 구성할 경우<br>자바에선 ITEM, ALBUM의 CRUD를 이중으로 수행하는 상황이 온다.(ITEM, ALBUM)<br>이것이 각자의 패러다임을 맞추기 위한 낭비이다.</p>
<blockquote>
<p>JPA는 ALBUM 객체만 전달하면 알아서 수행</p>
</blockquote>
<p>2) 연관관계<br>객체는 참조를 통해 객체끼리 연관관계를 가지고, 해당 참조에 접근해서 연관 객체를 조회한다.<br>테이블은 외래키를 사용하고, 조인을 이용해 연관 테이블을 조회한다.</p>
<blockquote>
<p>둘의 패러다임이 완전히 다르다.<br>   자바는 부모 객체를 통해 자식 객체를 조회 가능하지만 그 반대는 불가능하다. 그러나 테이블은 양쪽 조회가 가능하다.(JOIN)<br>   ★ 객체는 참조를 통해 연관관계를 가지지만, 테이블은 JOIN이라는 기능을 통한다.<br>   서로의 패러다임을 맞추기가 힘들다.<br>   JAVA의 패러다임에 맞추자니 개발자가 직접 변환해줘야 하기도 하고, 굉장히 복잡해진다.<br>   그렇다고  RDB의 패러다임에 맞추자니 객체지향의 특징을 잃어버린다.<br>JPA는 JAVA의 연관관계를 편하게 사용 가능하다. 참조를 통한 관계를 설정하고, ORM Framework에 전달만 해주면 된다.<br>     (JAVA의 패러다임에 맞춰 엔티티 설계하고, 복잡한 과정은 JPA가 대신해준다.)</p>
</blockquote>
<p>3) 객체 그래프 탐색<br>Member member = memberDao.find(mid);<br>member.getTeam();<br>member.getTeam().getName();<br>// 이와 같이 참조를 이용해서 파고드는 행위를 객체 탐색이라고 한다.</p>
<p>근데 사실상 아래와 같은 코드들(JPA를 사용하지 않는)<br>member.getTeam();<br>member.getOrder().getDelivery();</p>
<p>의 탐색 깊이는 결국 SQL문에 의존적이라는 것이다.<br>객체가 아무리 연관관계를 가진들 SQL에서 Order 테이블을 JOIN 하지 않았으면 2행은 Null Exception이 발생할 것 아닌가..</p>
<p>그렇다고 조회마다 Member에 관련된 모든 객체를 조회해서 메모리에 올려두는것은 비효율적.<br>상황에 따라 조회하는 메서드를 만들어야 한다.</p>
<blockquote>
<p>JPA에서는 연관 객체를 사용하는 시점에 select 쿼리를 실행할 수 있다(Lazy Loading)<br>   게다가 JPA는 이를 투명하게(transparent) 처리하므로 DAO에 따로 코드가 있지 않고<br>   getOrder() 함수를 호출할 때 지연 로딩을 한다.<br>   이는 엔티티 설정에서 줄 수 있다. 지연로딩을 하지 않을 경우 애초에 Member 객체를 얻어올떄 연관객체를 조인하는 쿼리가 실행된다.</p>
</blockquote>
<p>4) 비교<br>Java에서는 비교가 동일성, 동등성으로 나뉘기 때문에 복잡해지는 부분이 많다.<br>class MemberDAO(){<br>    publid Member findOne(String id){<br>        // select * from member where id=? 실행</p>
<pre><code>    Member memeber = new Member();
    // resultset을 member에 담음
    member.setXXX(rs.getString(XXX));
    ...

    return member;
}
</code></pre><p>}</p>
<p>Member member1 = memberDao.findOne(“id1”);<br>Member member2 = memberDao.findOne(“id1”);</p>
<p>member1 == member2 // false;</p>
<blockquote>
<p>동일성 비교에서 실패한다. new로 생성된 객체이기 때문이다.<br>   이처럼 db에서 같은 row를 조회했다 하더라도 위의 연산에서 true를 호출하게 하기가 어렵다.<br>   하지만 JPA는 위의 상황에서 동일성을 보장한다. (JPA의 조회 메서드를 사용)</p>
</blockquote>
<ul>
<li>JPA란<br>위치<br>Application - JPA - JDBC - DB</li>
</ul>
<p>JPA는 ORM 기술의 표준이다. ORM은 Object Relation Mapping의 약자이다.<br>JPA란 자바 ORM 기술에 대한 API 표준명세. 쉽게 말해 인터페이스들을 모아놓은 것이다.<br>따라서 JPA를 사용하려면 JPA를 구현한 ORM 프레임워크를 선택해야한다. (여러가지가 있으며 하이버네이트가 가장 대중적)<br>성숙한 ORM 프레임워크의 경우 간단한 CRUD외에 다양한 패러다임 문제까지 해결해주므로 개발자가 객체지향 어플리케이션 개발에 집중할 수 있다.</p>
<p>Why JPA?<br>1) 생산성 : ORM Framework에 엔티티만 전달하면 되므로, SQL을 개발자가 직접 작성하지 않아도 된다.<br>2) 유지보수 : 테이블의 명세가 변경되어도 변경할 사항이 많지 않다. 엔티티만 변경해주면 된다. (쿼리가 자동생성이므로)<br>            ex) 테이블에 컬럼이 추가되거나 삭제될 경우 JPA는 엔티티만 수정하면 되지만, mybatis의 경우 해당 엔티티를 사용하는 쿼리를 전부 수정해줘야 한다.<br>3) 패러다임 불일치 해결<br>4) JPA는 application과 jdbc사이에서 동작하기 때문에 시도할 수 있는 성능 최적화가 있다.<br>    위의 “4) 비교” 의 경우가 그렇다. 똑같은 row를 조회할 때 jdbc에 쿼리를 2번 보내지 않고, 기생성된 인스턴스를 사용한다.<br>5) 추상화 되어 있으므로 DB변경 또한 용이함. 벤더의 독립성</p>
]]></content>
      
        <categories>
            
            <category> jpa </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2장 - JPA 시작]]></title>
      <url>/jpa/2%EC%9E%A5-JPA-%EC%8B%9C%EC%9E%91/</url>
      <content type="html"><![CDATA[<ul>
<li>H2 데이터베이스<br>따로 설치할 필요없이 자바만 설치되어 있으면 사용할 수 있는 경량(1.7M) 데이터베이스이다.<br>(h2database.com에서 다운로드 가능)<br>JVM 메모리 안에서 실행되는 임베디드 모드와 별도의 서버를 띄우는 서버모드가 있다.</li>
</ul>
<p>※ package가 javax.persistence인것은 JPA 표준이므로 특정 구현체에 종속되지 않으나<br>hibernate로 시작되는건 hibernate만 사용 가능</p>
<ul>
<li>JPA 설정<br>1) 어노테이션<br>@Entity : 이 엔티티는 테이블과 매핑한다고 JPA에게 알려줌<br>@Table : 엔티티에 매핑될 테이블 정보를 알려줌(name 속성을 사용). 생략 시 클래스 이름을 사용<br>@Id : 기본키 매핑<br>@Column : 컬럼 매핑. name 속성에 테이블의 속성명을 써준다. 생략시 필드명을 사용</li>
</ul>
<p>2) persistence.xml<br>JPA 설정정보이다. META-INF 안에 있으면 자동으로 인식한다<br>\<persistence\> 태그로 시작. namespace와 version 지정<br>\<persistence-unit name="~~" \=""> 이라는 영속성 유닛 지정. 일반적으로 DB하나당 하나의 영속성 유닛을 등록한다.</persistence-unit></persistence\></p>
<p>필수 속성<br>1) JPA 표준 속성<br>javax.persistence.jdbc.driver<br>javax.persistence.jdbc.user<br>javax.persistence.jdbc.password<br>javax.persistence.jdbc.url<br>2) 하이버네이트 속성<br>hibernate.dialect</p>
<blockquote>
<p>dialect는 데이터베이스 방언을 의미한다. 방언은 특정 데이터베이스만의 고유한 기능을 뜻한다.<br>   JPA에서 특정 데이터베이스의 기능은 여기 방언에 지정한 클래스로 처리한다.<br>   즉, DB가 교체되어도 이 방언만 수정해주면 된다.</p>
</blockquote>
<p>이 외에 optional한 속성들이 있다(쿼리 로그, 쿼리 포맷, 주석 등등)</p>
<ul>
<li>실습<br>Hibernate의 기능을 사용하려면 EntityManager 라는 클래스를 사용해야 한다.(mybatis에서 sqlSession 이었던 것처럼)<br>EntityManager를 얻으려면 먼저 EntityManagerFactory를 생성해야 한다.</li>
</ul>
<p>EntityManagerFactory emf = Persistence.createEntityManagerFactory(“영속성유닛”);</p>
<p>persistence.xml의 내용을 읽어 EntityManagerFactory를 생성한다.<br>중요한점은 위의 엔티티 매니저 팩토리를 생성하는 비용이 매우 크다는 것이다.<br>그러므로 엔티티 매니저 팩토리는 딱 1번만 생성하고 공유해서 사용해야 한다.</p>
<p>EntityManager em = emf.createEntityManager();</p>
<p>엔티티 매니저 팩토리에서 엔티티 매니저를 생성한다.JPA의 대부분 기능은 이 EntityManager에서 제공한다(CRUD)<br>하나의 엔티티 매니저는 하나의 데이터소스를 유지하면서 통신한다.<br>데이터베이스 커넥션과 밀접한 관련이 있으므로 스레드간에 공유하거나 재사용하면 안된다.</p>
<p>예시)<br>※ JPA를 사용해서 데이터를 변경하려면 항상 <strong>트랜잭션 안에서</strong> 수행해야한다. 아니면 예외가 발생한다.<br>Member member = new Member();<br>member.setXXX(“XXX”);<br>….</p>
<p>em.persist(member); // 저장</p>
<p>member.setXXX(“XXX”); // 수정.  JPA는 어떤 엔티티가 변경되었는지 추적하는 기능을 갖추고 있다.</p>
<p>em.remove(member); // 삭제<br>// Member Entity에 @Id 컬럼으로 지정한 부분을 조건으로 삭제를 진행한다.</p>
<p>em.find(Member.class, id); // select * from member where id=?<br>// @Id 컬럼으로 지정한 부분을 조건으로 조회하는 아주 단순한 조회 메서드이다.</p>
<ul>
<li>JPQL<br>ORM의 한계를 위해 존재하는 부분.<br>select의 기본 문법을 지원함. 그러나 대상이 RDB의 테이블이 아니라 Entity이다.<blockquote>
<p>TypedQuery<t> query = em.createQuery(JPQL, return Type);<br> T t = query.getReulstList();<br>ex) em.createQuery(“select m from Member m”, Member.class);<br>// Member는 MEMBER테이블이 아니라 엔티티 Member이다.</t></p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> jpa </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[스프링 웹 기술과 스프링 MVC]]></title>
      <url>/spring/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81-MVC/</url>
      <content type="html"><![CDATA[<h2 id="스프링의-웹-프레젠테이션-계층-기술"><a href="#스프링의-웹-프레젠테이션-계층-기술" class="headerlink" title="스프링의 웹 프레젠테이션 계층 기술"></a>스프링의 웹 프레젠테이션 계층 기술</h2><p>presentation layer =<br>스프링 웹 기술을 사용하는 프레젠테이션 계층 + 스프링 외의 웹 기술을 사용하는 프레젠테이션 계층</p>
<p>컨텍스트<br>root contetxt : 웹 기술에서 독립적인 비즈니스 계층, 데이터 엑세스 계층<br>servlet application context : 스프링 웹 기술을 기반. 웹 관련 빈<br>> 통째로 다른 기술로 교체하기 용이하기 위해서</p>
<p>스프링 서블릿은 mvc 아키텍쳐를 따르는 웹 프레임워크를 구축할 수 있는 유연한 기반을 제공<br>@MVC와 같이 스프링이 확장시켜 만든 프레임워크도 있다.</p>
<blockquote>
<p>JSP/Servelt에서 스프링 빈 사용하려면 WebApplicationContextUtils의 스태틱 메서드를 사용하면 된다.<br>JSP에서 사용할 수 있는 HttpServletRequest 타입의 오브젝트를 이용하여 ServletContext를 가져올 수 있다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context =</div><div class="line">WebApplicationContextUtils.getWebApplicationContext(request.getSession().getServletContext());</div><div class="line">HelloBean helloBean = context.getBean(HelloBean.class);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>스프링 : 유연성, 확장성, 다양성에 무게를 둠<br>집착에 가까울 정도로 모든 기능을 확장 가능하도록 설계되어 있다.<br>스프링을 잘 사용하는 법은 스프링 프레임워크를 완성된 고정적인 프레임워크로 보지말고,<br>스프링이 가진 기존 기능을 확장해서 프로젝트에 맞는 프레임워크로 확장하는 것이다.</p>
<h3 id="DispatcherServlet-MVC-architecture"><a href="#DispatcherServlet-MVC-architecture" class="headerlink" title="DispatcherServlet, MVC architecture"></a>DispatcherServlet, MVC architecture</h3><p>스프링 웹 기술은 MVC 아키텍쳐를 기반으로 하고있고, 핵심 기술은 DispatcherServlet이다.<br>M(Model) : 프레젠테이션 계층의 구성요소 정보를 담음<br>V(View) : 화면 출력 로직<br>C(Controller) : 제어 로직</p>
<p>프론트 컨트롤러 패턴 :<br>중앙 집중형 컨트롤러(e.g. DispatcherServlet)을 계층의 젤 앞에 둬서 요청을 가장 먼저 받아 처리하게 만드는 패턴<br>선행작업, 뷰 선택, 예외처리 등을 행한다.</p>
<p><img src="https://user-images.githubusercontent.com/18513953/30509764-e17c5fc6-9af2-11e7-99be-b7c65e956fb0.png" alt="DispatcherServlet Flow"></p>
<h4 id="DispatcherServlet의-requset-gt-response과정"><a href="#DispatcherServlet의-requset-gt-response과정" class="headerlink" title="DispatcherServlet의 requset -&gt; response과정"></a>DispatcherServlet의 requset -&gt; response과정</h4><ol>
<li>web.xml등에 따라 요청을 dispatcherServlet이 받고, 공통적으로 진행해야 하는 전처리 작업 등을 한다.<br>e.g 보안, 파라미터 조작, 디코딩 등</li>
<li>url, parameter 정보 등을 사용하여 어떤 컨트롤러에게 작업을 위임할 지 결정(핸들러 매핑 전략)<br>개발자는 어떤 오브젝트가 처리할지를 매핑하는 전략을 만들어 DI가능하도록 제공해주기만 하면 된다.<br>이후 요청이 들어오면, DispatcherServlet은 컨트롤러를 선택하고, 해당 메서드를 실행하여 실제 작업을 처리한다.<br>여기서 중요한 것은 컨트롤러가 특정 인터페이스를 구현하는 식의 규약을 따르지 않았다는 것이다.<br>그러한데도 DispatcherServlet이 컨트롤러의 메서드를 호출할 수 있는 이유는 <strong>어댑터</strong> 라는 것을 이용하기 때문이다.</li>
</ol>
<blockquote>
<p>DispatcherServlet -&gt; HandlerAdapter -&gt; Controller 의 형태이다.<br>DispatcherServlet은 모든 웹 요청정보가 담긴 HttpServletRequest 오브젝트를 전달해주고,<br>이를 어댑터가 컨트롤러 메서드가 받을 수 있도록 파라미터로 변환하여 전달한다. (HttpServletResponse도 전달해준다)</p>
<ol>
<li>컨트롤러는 사용자의 요청을 해석하여 로직을 수행한 뒤 결과에 따라 모델을 생성한다. 모델은 key, value로 이뤄진 쌍이라고 보면 된다.<br>이후 뷰를 선택한다. 뷰도 하나의 오브젝트이다. 컨트롤러가 직접 선택할 수도 있지만 보통은 논리적인 이름을 리턴해주고,<br>DispatcherServlet의 뷰 리졸버가 이를 이용해 뷰 오브젝트를 생성해준다.<br>이후 준비된 모델과 뷰를 DispatcherServlet에 돌려줌으로써 컨트롤러의 역할은 끝난다.<br>(ModelAndView, Model 등의 오브젝트를 사용하여 전달할 수 있다.)</li>
<li>DispatcherServlet은 뷰 오브젝트에 모델을 전달하고, 결과물을 생성해달라고 요청한다.<br>(JstlView의 경우 컨트롤러가 리턴한 논리적 이름의 jsp 템플릿을 가져다가 HTML을 생성한다.)<br>HTML이 일반적이고, 엑셀, PDF등과 같이 파일 형태로 만드는 뷰도 있다.<br>모델이 같아도 어떤 뷰를 선택하느냐에 따라 결과가 달라질수 있다는 의미이다.<br>최종 결과는 HttpServletReponse에 담긴다.</li>
<li>DispatcherServlet은 마지막으로 후처리기가 있는가 확인 후,<br>있으면 후처리를 진행한 뒤 최종 HttpServletResponse를 서블릿 컨테이너에 돌려준다.</li>
<li>서블릿 컨테이너는 이를 HTTP 응답으로 만들어 클라이언트에 전송하고 작업이 종료된다.</li>
</ol>
</blockquote>
<h3 id="DispatcherServlet의-확장-가능한-전략-using-DI"><a href="#DispatcherServlet의-확장-가능한-전략-using-DI" class="headerlink" title="DispatcherServlet의 확장 가능한 전략(using DI)"></a>DispatcherServlet의 확장 가능한 전략(using DI)</h3><ul>
<li>HandlerMapping<br>URL과 요청정보를 기준으로 컨트롤러를 결정한다. HandlerMapping 인터페이스를 구현해서 만들 수 있다.</li>
<li>HandlerAdapter<br>HandlerMapping으로 선택한 컨트롤러를 호출할 때 사용하는 어댑터다.<br>컨트롤러 호출 방법은 타입에 따라 다르기 때문에 컨트롤러를 결정했다고 해도 호출방법을 DispatcherServlet이 알 수가 없으므로, 어댑터가 필요하다.</li>
<li>HandlerExceptionResolver<br>비즈니스로직이 아닌 초기 요청단계에서의 Exception은 프론트 컨트롤러인 DispatcherServlet에 의해 처리되어야 한다.<br>DispatcherServlet은 등록된 HandlerExceptionResolver중에 적합한 것을 찾아 예외처리를 위임한다.</li>
<li>ViewResolver<br>컨트롤러가 리턴한 논리적 뷰 이름을 통해 뷰 오브젝트를 찾아주는 오브젝트다.<br>디폴트는 InternalResourceViewResolver이며, JSP같은 리소스를 사용할 수 있게 해주는 뷰 리졸버이다.</li>
<li>LocaleResolver<br>지역정보를 결정해주는 전략. default인 AcceptHeaderLocaleResolve는 HTTP header정보를 보고 locale정보를 설정한다.<br>이 전략을 바꾸면 파라미터, 쿠키, xml등을 이용할 수도 있다.</li>
<li>RequestToViewNameTranslator<br>컨트롤러에서 뷰 정보를 제공하지 않았을 경우 URL등을 이용해서 자동으로 뷰 이름을 생성해주는 전략</li>
</ul>
<blockquote>
<p>DispatcherServlet은 스프링 컨테이너가 아닌 서블릿 컨텍스트가 관리하는 오브젝트이기<br>때문에 직접 DI가 불가능하다.</p>
<p>DispatcherServlet은 각 전략의 default 설정을 DispatcherServlet.properties라는 파일로부터 가져와서 초기화하는데, </p>
<p>이전에 개발자가 추가하거나 수정한 전략이 있나 찾아보고 있으면 대체, 없으면 default 전략을 사용한다.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
