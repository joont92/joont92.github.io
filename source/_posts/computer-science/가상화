가상머신을 어떻게 구현할까 고민하다보니 여러가지 방식이 나왔고 거기서 크게 2가지로 나뉜다

- Virtual Machine Type1
하드웨어 위에 바로 VMM(하이퍼바이저)을 깔고, 그 위에 가상머신을 여러개 띄우는 방식
- Virtual Machine Type2
하드웨어 위에 운영체제가 이미 깔려있고, 그 위에 VMM을 설치하고 그 안에서 가상머신을 여러개 띄우는 방식

> 아무래도 Type2는 거쳐야 할 경로가 더 많으므로 Type1이 성능이 좀 더 좋다

또다른 구분 기준
- 전가상화
모든 가상머신의 요청이 VMM을 거쳐서 하드웨어에 전달되는 구조
전체를 가상화해서 전가상화라고 함
- 반가상화
가상머신이 하드웨어에 요청할 명령과 VMM에 요청할 명령을 구분해서 요청할 수 있음
그렇다면 VMM은 무얼하나? VMM은 관리의 역할을 한다(가상머신이 전부 CPU 100프로를 요청했을 경우 분배)

속도는 반가상화가 빠르나, OS를 수정해야 되므로 복잡도가 올라가고, 성능이 떨어질 우려가 있음
요즘에는 하드웨어 성능이 좋아서 전가상화를 대부분 사용함

100대의 컴퓨터를 10000대의 컴퓨터인것 처럼 보여야하므로 가상머신을 사용해야한다

Virtual Machine
KVM
- 리눅스 커널의 기능을 사용함(따지고 보면 리눅스 커널이다?)
- ioctl 이라는 하드웨어 직접 명령(시스템콜)을 사용함
- 이 명령으로 CPU에 가상 CPU를 만들어달라고 요청
- 이럴려면 CPU에서 이 기능을 제공해야하는데, Intel CPU는 Intel-VT 라는 기능으로 제공한다
- 결과적으로 가상 기술을 사용하려면 CPU에서 지원이 되어야한다

Docker
추가 OS = 게스트커널?
chroot를 사용해서 실행환경을 분리함
하드웨어 전체를 가상화하는 것과 다르다
리눅스 커널의 기능이므로 mac이나 windows는 밑바닥에 리눅스를 설치하고 docker를 돌린다
