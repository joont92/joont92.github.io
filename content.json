{"meta":{"title":"joont blog","subtitle":null,"description":"joont blog","author":"joont","url":"https://joont92.github.io"},"pages":[],"posts":[{"title":"사용자/그룹 관리","slug":"linux/사용자-그룹-관리","date":"2017-10-28T13:32:44.350Z","updated":"2017-10-28T13:32:44.350Z","comments":true,"path":"2017/10/28/linux/사용자-그룹-관리/","link":"","permalink":"https://joont92.github.io/2017/10/28/linux/사용자-그룹-관리/","excerpt":"","text":"","categories":[{"name":"linux","slug":"linux","permalink":"https://joont92.github.io/categories/linux/"}],"tags":[]},{"title":"프로세스","slug":"linux/프로세스","date":"2017-10-28T13:32:36.182Z","updated":"2017-10-28T13:32:36.182Z","comments":true,"path":"2017/10/28/linux/프로세스/","link":"","permalink":"https://joont92.github.io/2017/10/28/linux/프로세스/","excerpt":"","text":"작업 : 작성한 프로그램 + 프로그램 실행에 필요한 데이터작업이 커널에 등록되어 커널의 관리하에 있게 되면 이를 프로세스라고 부른다.일반적으로 실행중인 프로그램을 말한다. 종속된 자식 프로세스는 부모 프로세스의 환경을 물려받으나 역은 성립하지 않는다.","categories":[{"name":"linux","slug":"linux","permalink":"https://joont92.github.io/categories/linux/"}],"tags":[]},{"title":"apt 명렁어","slug":"linux/apt-명렁어","date":"2017-10-28T13:32:32.126Z","updated":"2017-10-28T13:32:32.126Z","comments":true,"path":"2017/10/28/linux/apt-명렁어/","link":"","permalink":"https://joont92.github.io/2017/10/28/linux/apt-명렁어/","excerpt":"","text":"패키지란커널 및 라이브러리 버전의 배포판 환경에 맞추어 빌드한 실행파일을 압축한 것. apt란우분투에서 쓰이는 데비안 계열의 패키지를 관리하는데 쓰이는 도구이다. 저장소 리스트 : /etc/apt/sources.list 패키지 리스트 업데이트1apt-get update > 실제 패키지를 업그레이드 하는 것이 아니라 사용가능한 패키지 리스트의 정보를 업데이트 패키지 업데이트1apt-get upgrade > 실제 설치되어 있는 패키지들을 최신 버전으로 업그레이드 패키지 설치1apt-get install [패키지명] 패키지 재설치1apt-get --reinstall install [패키지명] 패키지 삭제12apt-get remove [패키지명] # 설정파일은 지우지 않음apt-get purge [패키지명] # 설정파일까지 지움 패키지 검색1apt-cache search [패키지명] 패키지 정보1apt-cache show [패키지명] apt 명령어를 이용해 설치한 패키지는 \\/var\\/cache\\/apt\\/archives 에 설치된다.","categories":[{"name":"linux","slug":"linux","permalink":"https://joont92.github.io/categories/linux/"}],"tags":[]},{"title":"bash_profile과 bashrc","slug":"linux/bash-profile과-bashrc","date":"2017-10-28T13:32:28.022Z","updated":"2017-10-28T13:32:28.022Z","comments":true,"path":"2017/10/28/linux/bash-profile과-bashrc/","link":"","permalink":"https://joont92.github.io/2017/10/28/linux/bash-profile과-bashrc/","excerpt":"","text":"리눅스에서 alias를 수정하거나 PATH를 변경할 떄 접하게 되는 대표적인 4가지의 파일들.. 1/etc/profile, /etc/bashrc, ~\\.bash_profile, ~\\.bash_rc 각각의 파일에 대해 간단하게 알아보겠다. 일단 이에 대해 알기전에 Login Shell과 Non-Login Shell의 차이에 대해 알아야 한다. Login ShellShell을 실행할 때 로그인이 필요한 경우를 말한다.ssh로 접속하거나, su 명령어로 다른계정을 들어갈 때 등이 해당된다. \\/etc\\/profile, ~\\/.bash_profile 파일이 이 Shell이 뜰 때 실행되는 파일이다. Non-Login ShellShell을 실행할 떄 로그인이 필요하지 않은 경우를 말한다.즉 Shell이 실행되는 모든 상황을 의미하게 됩니다.GUI에서 터미널을 띄울때나, bash 명령어로 다시 bash를 실행하는 경우 등이 해당된다. \\/etc\\/bashrc, ~\\/.bashrc 파일이 이 Shell이 뜰 때 실행되는 파일이다. Login Shell은 Non-Login Shell을 포함합니다.Login Shell이 실행될 때 profile과 bashrc 파일이 모두 실행되게 되고,Non-Login Shell이 실행될 때 bashrc 파일만 실행되게 됩니다. profile\\/etc\\/profile 파일의 경우 전역적인 파일로 모든 사용자가 로그인 시 실행되며,~\\/.bash_profile 파일의 경우 지역적인 파일로 해당하는 사용자가 로그인 시만 실행된다.또한 \\/etc\\/profile의 경우 어떠한 shell이든 상관없지만, ~\\/.bash_profile의 경우 bash shell일 경우에만 해당된다. bashrcprofile과 달리 Login 과정이 없으므로 shell을 실행시키는 사용자로 구분한다.\\/etc\\/bashrc의 경우 모든 사용자가 shell을 실행시킬 때 마다 실행되며,~\\/.bashrc의 경우 해당하는 사용자가 shell 실행시킬 때 실행된다. profile의 경우 대부분 환경 변수같은 것을 명시하고 bashrc의 경우 alias 같은 것을 명시한다..(?)","categories":[{"name":"linux","slug":"linux","permalink":"https://joont92.github.io/categories/linux/"}],"tags":[]},{"title":"Hello World","slug":"test/hello-world","date":"2017-10-28T13:27:49.157Z","updated":"2017-10-28T13:27:49.161Z","comments":true,"path":"2017/10/28/test/hello-world/","link":"","permalink":"https://joont92.github.io/2017/10/28/test/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://joont92.github.io/categories/test/"}],"tags":[]},{"title":"hexo와 github pages로 블로그 만들기","slug":"test/hexo와-github-pages로-블로그-만들기","date":"2017-09-23T02:06:58.000Z","updated":"2017-10-28T14:32:15.768Z","comments":true,"path":"2017/09/23/test/hexo와-github-pages로-블로그-만들기/","link":"","permalink":"https://joont92.github.io/2017/09/23/test/hexo와-github-pages로-블로그-만들기/","excerpt":"","text":"이번엔 앞서 작성한 github-pages에 블로그 서비스를 하기 위해 정적 사이트 생성 도구인 hexo에 대해 알아보겠습니다. Hexo블로그 형태의 정적사이트를 생성하는데 사용되는 도구입니다. hexo는 사용자가 작성한 포스트(markdown 등)을 읽어서, 정적파일 생성기를 통해 웹서버에 바로 서비스 할 수 있는 형태의 정적 웹사이트를 만들어냅니다. 대표적인 것으로 jekyll이 있지만 hexo가 좀 더 편해보이고 테마도 맘에 들어서 hexo를 사용하기로 했습니다 ㅎㅎ 설치 사전준비 : Node.js,npm,git 바로 설치하고 초기화 해보겠습니다. 12npm install -g hexo-clihexo init '폴더명' ‘폴더명’에 입력한 폴더를 만들고 그 폴더에 hexo 관련 파일을 초기화합니다. (폴더를 지정하지 않으면 현재 폴더에 초기화하는데, 현재 폴더가 비어있는 상태여야 합니다.) 아래는 초기화 후 폴더 모습입니다! 빨간색으로 표시해둔 _config.yml에서 블로그에 대한 대부분의 설정을 할 수 있습니다. 초기화가 완료되면 간단하게 로컬에서 테스트 해보도록 할까요 해당 폴더로 이동하여 1hexo server 라고 입력하면, INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 라는 메시지와 함께 http://localhost:4000 으로 접속 가능합니다. 기본 테마로 생성된 정적 블로그 페이지를 볼 수 있을 것입니다 ㅎㅎ 테마 적용하지만 이대로 사용할 순 없으니 테마를 한번 적용해보도록 하죠. 적용방법은 매우 간단합니다. https://hexo.io/themes/index.html 위의 주소에 접속한 뒤, 마음에 드는 테마를 고르시면 됩니다. 각 테마의 github 페이지에 들어가면 테마 적용 방법에 대한 상세한 설명이 있으니 별로 어려움 없으실 겁니다 ㅎㅎ 제가 고른 테마는 Material Flow 라는 테마입니다. gitgub : https://github.com/stkevintan/hexo-theme-material-flow 보시다시피 매우 간단합니다. 소스를 clone받고 _config.yml에서 해당 테마로 지정해주기만 하면 됩니다. 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: material-flow 설정이 다 되었으면 12hexo cleanhexo generate # 정적 리소스 생성 와 같이 입력하여 정적 리소스를 생성해주면 됩니다. 간혹 제대로 되지 않는 경우도 있기 떄문에 clean도 한번 해줬습니다. 이제 다시 hexo server 입력 후 들어가보시면 테마가 잘 적용되어 있음을 보실 수 있습니다! 글을 써보자블로그를 만들었으니 글을 써야겠네요. 123hexo new post [post_name]# ex) hexo new post 'first post'# ex) hexo new post first-post 과 같이 입력하면, 폴더에 아래와 같은 형태로 markdown 파일이 하나 생성됩니다.1234567```md---title: first postdate: 2017-09-23 10:51:08tags:--- 각종 폴더나 카테고리에 대한 설정도 _config.yml에서 할 수 있으니 각자 설정하시면 됩니다 ㅎㅎ 배포이제 github에 배포해보도록 하겠습니다 ㅎㅎ 먼저 _config.yml에 deploy 관련 설정을 해 줍니다. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/joont92/joont92.github.io.git branch: master 저장한 뒤 123456hexo cleanhexo generate # 정적파일 생성하고hexo deploy # 배포!# hexo deploy --generate 로도 가능 와 같이 해주면 끝입니다. 매우 간단하죠?? 배포시 아래와 같은 메시지와 함께 배포가 되지 않는 경우1ERROR Deployer not found: git hexo-deployer-git 플러그인을 설치해주면 됩니다. 1npm install hexo-deloyer-git --save 여기까지입니다 ㅎㅎ 블로그에 markdown을 사용할 수 있고, git의 형상관리를 블로그에 사용할 수 있다니 매우 좋은것 같네요. 들려주셔서 감사합니다~~","categories":[{"name":"test","slug":"test","permalink":"https://joont92.github.io/categories/test/"}],"tags":[]},{"title":"first post","slug":"test/first-post","date":"2017-09-23T01:51:08.000Z","updated":"2017-10-28T13:27:48.013Z","comments":true,"path":"2017/09/23/test/first-post/","link":"","permalink":"https://joont92.github.io/2017/09/23/test/first-post/","excerpt":"","text":"","categories":[{"name":"test","slug":"test","permalink":"https://joont92.github.io/categories/test/"}],"tags":[]}]}